### YamlMime:ManagedReference
items:
- uid: piine.Memory.UnmanagedBuffer`1
  commentId: T:piine.Memory.UnmanagedBuffer`1
  id: UnmanagedBuffer`1
  parent: piine.Memory
  children:
  - piine.Memory.UnmanagedBuffer`1.#ctor(`0*,System.Int64)
  - piine.Memory.UnmanagedBuffer`1.#ctor(System.IntPtr,System.Int64)
  - piine.Memory.UnmanagedBuffer`1.Allocated
  - piine.Memory.UnmanagedBuffer`1.Equals(piine.Memory.UnmanagedBuffer{`0})
  - piine.Memory.UnmanagedBuffer`1.Equals(System.Object)
  - piine.Memory.UnmanagedBuffer`1.GetHashCode
  - piine.Memory.UnmanagedBuffer`1.GetPointer
  - piine.Memory.UnmanagedBuffer`1.Item(System.Int64)
  - piine.Memory.UnmanagedBuffer`1.Length
  - piine.Memory.UnmanagedBuffer`1.op_Equality(piine.Memory.UnmanagedBuffer{`0},piine.Memory.UnmanagedBuffer{`0})
  - piine.Memory.UnmanagedBuffer`1.op_Inequality(piine.Memory.UnmanagedBuffer{`0},piine.Memory.UnmanagedBuffer{`0})
  langs:
  - csharp
  - vb
  name: UnmanagedBuffer<T>
  nameWithType: UnmanagedBuffer<T>
  fullName: piine.Memory.UnmanagedBuffer<T>
  type: Struct
  source:
    remote:
      path: src/Memory/UnmanagedBuffer.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: UnmanagedBuffer
    path: src/Memory/UnmanagedBuffer.cs
    startLine: 10
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nPoints to a buffer stored in unmanaged memory.\n"
  example: []
  syntax:
    content: 'public struct UnmanagedBuffer<T> : IEquatable<UnmanagedBuffer<T>> where T : struct'
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      Public Structure UnmanagedBuffer(Of T As Structure)
          Implements IEquatable(Of UnmanagedBuffer(Of T))
  implements:
  - System.IEquatable{piine.Memory.UnmanagedBuffer`1}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: UnmanagedBuffer(Of T)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T)
  name.vb: UnmanagedBuffer(Of T)
- uid: piine.Memory.UnmanagedBuffer`1.Length
  commentId: P:piine.Memory.UnmanagedBuffer`1.Length
  id: Length
  parent: piine.Memory.UnmanagedBuffer`1
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: UnmanagedBuffer<T>.Length
  fullName: piine.Memory.UnmanagedBuffer<T>.Length
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedBuffer.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Length
    path: src/Memory/UnmanagedBuffer.cs
    startLine: 14
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public long Length { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property Length As Long
  overload: piine.Memory.UnmanagedBuffer`1.Length*
  nameWithType.vb: UnmanagedBuffer(Of T).Length
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Length
- uid: piine.Memory.UnmanagedBuffer`1.Allocated
  commentId: P:piine.Memory.UnmanagedBuffer`1.Allocated
  id: Allocated
  parent: piine.Memory.UnmanagedBuffer`1
  langs:
  - csharp
  - vb
  name: Allocated
  nameWithType: UnmanagedBuffer<T>.Allocated
  fullName: piine.Memory.UnmanagedBuffer<T>.Allocated
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedBuffer.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Allocated
    path: src/Memory/UnmanagedBuffer.cs
    startLine: 15
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public bool Allocated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Allocated As Boolean
  overload: piine.Memory.UnmanagedBuffer`1.Allocated*
  nameWithType.vb: UnmanagedBuffer(Of T).Allocated
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Allocated
- uid: piine.Memory.UnmanagedBuffer`1.Item(System.Int64)
  commentId: P:piine.Memory.UnmanagedBuffer`1.Item(System.Int64)
  id: Item(System.Int64)
  parent: piine.Memory.UnmanagedBuffer`1
  langs:
  - csharp
  - vb
  name: Item[Int64]
  nameWithType: UnmanagedBuffer<T>.Item[Int64]
  fullName: piine.Memory.UnmanagedBuffer<T>.Item[System.Int64]
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedBuffer.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: this[]
    path: src/Memory/UnmanagedBuffer.cs
    startLine: 17
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public T this[long index] { get; set; }
    parameters:
    - id: index
      type: System.Int64
    return:
      type: '{T}'
    content.vb: Public Property Item(index As Long) As T
  overload: piine.Memory.UnmanagedBuffer`1.Item*
  nameWithType.vb: UnmanagedBuffer(Of T).Item(Int64)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Item(System.Int64)
  name.vb: Item(Int64)
- uid: piine.Memory.UnmanagedBuffer`1.#ctor(`0*,System.Int64)
  commentId: M:piine.Memory.UnmanagedBuffer`1.#ctor(`0*,System.Int64)
  id: '#ctor(`0*,System.Int64)'
  parent: piine.Memory.UnmanagedBuffer`1
  langs:
  - csharp
  - vb
  name: UnmanagedBuffer(T*, Int64)
  nameWithType: UnmanagedBuffer<T>.UnmanagedBuffer(T*, Int64)
  fullName: piine.Memory.UnmanagedBuffer<T>.UnmanagedBuffer(T*, System.Int64)
  type: Constructor
  source:
    remote:
      path: src/Memory/UnmanagedBuffer.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: .ctor
    path: src/Memory/UnmanagedBuffer.cs
    startLine: 39
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: >-
      [CLSCompliant(false)]

      public UnmanagedBuffer(T*pointer, long length)
    parameters:
    - id: pointer
      type: '{T}*'
    - id: length
      type: System.Int64
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub New(pointer As T *, length As Long)
  overload: piine.Memory.UnmanagedBuffer`1.#ctor*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: UnmanagedBuffer(Of T).UnmanagedBuffer(T*, Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).UnmanagedBuffer(T*, System.Int64)
- uid: piine.Memory.UnmanagedBuffer`1.#ctor(System.IntPtr,System.Int64)
  commentId: M:piine.Memory.UnmanagedBuffer`1.#ctor(System.IntPtr,System.Int64)
  id: '#ctor(System.IntPtr,System.Int64)'
  parent: piine.Memory.UnmanagedBuffer`1
  langs:
  - csharp
  - vb
  name: UnmanagedBuffer(IntPtr, Int64)
  nameWithType: UnmanagedBuffer<T>.UnmanagedBuffer(IntPtr, Int64)
  fullName: piine.Memory.UnmanagedBuffer<T>.UnmanagedBuffer(System.IntPtr, System.Int64)
  type: Constructor
  source:
    remote:
      path: src/Memory/UnmanagedBuffer.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: .ctor
    path: src/Memory/UnmanagedBuffer.cs
    startLine: 46
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public UnmanagedBuffer(IntPtr pointer, long length)
    parameters:
    - id: pointer
      type: System.IntPtr
    - id: length
      type: System.Int64
    content.vb: Public Sub New(pointer As IntPtr, length As Long)
  overload: piine.Memory.UnmanagedBuffer`1.#ctor*
  nameWithType.vb: UnmanagedBuffer(Of T).UnmanagedBuffer(IntPtr, Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).UnmanagedBuffer(System.IntPtr, System.Int64)
- uid: piine.Memory.UnmanagedBuffer`1.GetPointer
  commentId: M:piine.Memory.UnmanagedBuffer`1.GetPointer
  id: GetPointer
  parent: piine.Memory.UnmanagedBuffer`1
  langs:
  - csharp
  - vb
  name: GetPointer()
  nameWithType: UnmanagedBuffer<T>.GetPointer()
  fullName: piine.Memory.UnmanagedBuffer<T>.GetPointer()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedBuffer.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: GetPointer
    path: src/Memory/UnmanagedBuffer.cs
    startLine: 52
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: >-
      [CLSCompliant(false)]

      public T*GetPointer()
    return:
      type: '{T}*'
    content.vb: >-
      <CLSCompliant(False)>

      Public Function GetPointer As T
  overload: piine.Memory.UnmanagedBuffer`1.GetPointer*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: UnmanagedBuffer(Of T).GetPointer()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).GetPointer()
- uid: piine.Memory.UnmanagedBuffer`1.op_Equality(piine.Memory.UnmanagedBuffer{`0},piine.Memory.UnmanagedBuffer{`0})
  commentId: M:piine.Memory.UnmanagedBuffer`1.op_Equality(piine.Memory.UnmanagedBuffer{`0},piine.Memory.UnmanagedBuffer{`0})
  id: op_Equality(piine.Memory.UnmanagedBuffer{`0},piine.Memory.UnmanagedBuffer{`0})
  parent: piine.Memory.UnmanagedBuffer`1
  langs:
  - csharp
  - vb
  name: Equality(UnmanagedBuffer<T>, UnmanagedBuffer<T>)
  nameWithType: UnmanagedBuffer<T>.Equality(UnmanagedBuffer<T>, UnmanagedBuffer<T>)
  fullName: piine.Memory.UnmanagedBuffer<T>.Equality(piine.Memory.UnmanagedBuffer<T>, piine.Memory.UnmanagedBuffer<T>)
  type: Operator
  source:
    remote:
      path: src/Memory/UnmanagedBuffer.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: op_Equality
    path: src/Memory/UnmanagedBuffer.cs
    startLine: 61
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public static bool operator ==(UnmanagedBuffer<T> left, UnmanagedBuffer<T> right)
    parameters:
    - id: left
      type: piine.Memory.UnmanagedBuffer`1
    - id: right
      type: piine.Memory.UnmanagedBuffer`1
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As UnmanagedBuffer(Of T), right As UnmanagedBuffer(Of T)) As Boolean
  overload: piine.Memory.UnmanagedBuffer`1.op_Equality*
  nameWithType.vb: UnmanagedBuffer(Of T).Equality(UnmanagedBuffer(Of T), UnmanagedBuffer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Equality(piine.Memory.UnmanagedBuffer(Of T), piine.Memory.UnmanagedBuffer(Of T))
  name.vb: Equality(UnmanagedBuffer(Of T), UnmanagedBuffer(Of T))
- uid: piine.Memory.UnmanagedBuffer`1.op_Inequality(piine.Memory.UnmanagedBuffer{`0},piine.Memory.UnmanagedBuffer{`0})
  commentId: M:piine.Memory.UnmanagedBuffer`1.op_Inequality(piine.Memory.UnmanagedBuffer{`0},piine.Memory.UnmanagedBuffer{`0})
  id: op_Inequality(piine.Memory.UnmanagedBuffer{`0},piine.Memory.UnmanagedBuffer{`0})
  parent: piine.Memory.UnmanagedBuffer`1
  langs:
  - csharp
  - vb
  name: Inequality(UnmanagedBuffer<T>, UnmanagedBuffer<T>)
  nameWithType: UnmanagedBuffer<T>.Inequality(UnmanagedBuffer<T>, UnmanagedBuffer<T>)
  fullName: piine.Memory.UnmanagedBuffer<T>.Inequality(piine.Memory.UnmanagedBuffer<T>, piine.Memory.UnmanagedBuffer<T>)
  type: Operator
  source:
    remote:
      path: src/Memory/UnmanagedBuffer.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: op_Inequality
    path: src/Memory/UnmanagedBuffer.cs
    startLine: 63
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public static bool operator !=(UnmanagedBuffer<T> left, UnmanagedBuffer<T> right)
    parameters:
    - id: left
      type: piine.Memory.UnmanagedBuffer`1
    - id: right
      type: piine.Memory.UnmanagedBuffer`1
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As UnmanagedBuffer(Of T), right As UnmanagedBuffer(Of T)) As Boolean
  overload: piine.Memory.UnmanagedBuffer`1.op_Inequality*
  nameWithType.vb: UnmanagedBuffer(Of T).Inequality(UnmanagedBuffer(Of T), UnmanagedBuffer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Inequality(piine.Memory.UnmanagedBuffer(Of T), piine.Memory.UnmanagedBuffer(Of T))
  name.vb: Inequality(UnmanagedBuffer(Of T), UnmanagedBuffer(Of T))
- uid: piine.Memory.UnmanagedBuffer`1.GetHashCode
  commentId: M:piine.Memory.UnmanagedBuffer`1.GetHashCode
  id: GetHashCode
  parent: piine.Memory.UnmanagedBuffer`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: UnmanagedBuffer<T>.GetHashCode()
  fullName: piine.Memory.UnmanagedBuffer<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedBuffer.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: GetHashCode
    path: src/Memory/UnmanagedBuffer.cs
    startLine: 65
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: piine.Memory.UnmanagedBuffer`1.GetHashCode*
  nameWithType.vb: UnmanagedBuffer(Of T).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).GetHashCode()
- uid: piine.Memory.UnmanagedBuffer`1.Equals(System.Object)
  commentId: M:piine.Memory.UnmanagedBuffer`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: piine.Memory.UnmanagedBuffer`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: UnmanagedBuffer<T>.Equals(Object)
  fullName: piine.Memory.UnmanagedBuffer<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedBuffer.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Equals
    path: src/Memory/UnmanagedBuffer.cs
    startLine: 67
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: piine.Memory.UnmanagedBuffer`1.Equals*
  nameWithType.vb: UnmanagedBuffer(Of T).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Equals(System.Object)
- uid: piine.Memory.UnmanagedBuffer`1.Equals(piine.Memory.UnmanagedBuffer{`0})
  commentId: M:piine.Memory.UnmanagedBuffer`1.Equals(piine.Memory.UnmanagedBuffer{`0})
  id: Equals(piine.Memory.UnmanagedBuffer{`0})
  parent: piine.Memory.UnmanagedBuffer`1
  langs:
  - csharp
  - vb
  name: Equals(UnmanagedBuffer<T>)
  nameWithType: UnmanagedBuffer<T>.Equals(UnmanagedBuffer<T>)
  fullName: piine.Memory.UnmanagedBuffer<T>.Equals(piine.Memory.UnmanagedBuffer<T>)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedBuffer.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Equals
    path: src/Memory/UnmanagedBuffer.cs
    startLine: 77
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public bool Equals(UnmanagedBuffer<T> other)
    parameters:
    - id: other
      type: piine.Memory.UnmanagedBuffer`1
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As UnmanagedBuffer(Of T)) As Boolean
  overload: piine.Memory.UnmanagedBuffer`1.Equals*
  implements:
  - System.IEquatable{piine.Memory.UnmanagedBuffer`1}.Equals(piine.Memory.UnmanagedBuffer{{T}})
  nameWithType.vb: UnmanagedBuffer(Of T).Equals(UnmanagedBuffer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Equals(piine.Memory.UnmanagedBuffer(Of T))
  name.vb: Equals(UnmanagedBuffer(Of T))
references:
- uid: piine.Memory
  commentId: N:piine.Memory
  name: piine.Memory
  nameWithType: piine.Memory
  fullName: piine.Memory
- uid: System.IEquatable{piine.Memory.UnmanagedBuffer`1}
  commentId: T:System.IEquatable{piine.Memory.UnmanagedBuffer`1}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<UnmanagedBuffer<T>>
  nameWithType: IEquatable<UnmanagedBuffer<T>>
  fullName: System.IEquatable<piine.Memory.UnmanagedBuffer<T>>
  nameWithType.vb: IEquatable(Of UnmanagedBuffer(Of T))
  fullName.vb: System.IEquatable(Of piine.Memory.UnmanagedBuffer(Of T))
  name.vb: IEquatable(Of UnmanagedBuffer(Of T))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: piine.Memory.UnmanagedBuffer`1
    name: UnmanagedBuffer
    nameWithType: UnmanagedBuffer
    fullName: piine.Memory.UnmanagedBuffer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: piine.Memory.UnmanagedBuffer`1
    name: UnmanagedBuffer
    nameWithType: UnmanagedBuffer
    fullName: piine.Memory.UnmanagedBuffer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: piine.Memory.UnmanagedBuffer`1.Length*
  commentId: Overload:piine.Memory.UnmanagedBuffer`1.Length
  name: Length
  nameWithType: UnmanagedBuffer<T>.Length
  fullName: piine.Memory.UnmanagedBuffer<T>.Length
  nameWithType.vb: UnmanagedBuffer(Of T).Length
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Length
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: piine.Memory.UnmanagedBuffer`1.Allocated*
  commentId: Overload:piine.Memory.UnmanagedBuffer`1.Allocated
  name: Allocated
  nameWithType: UnmanagedBuffer<T>.Allocated
  fullName: piine.Memory.UnmanagedBuffer<T>.Allocated
  nameWithType.vb: UnmanagedBuffer(Of T).Allocated
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Allocated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: piine.Memory.UnmanagedBuffer`1.Item*
  commentId: Overload:piine.Memory.UnmanagedBuffer`1.Item
  name: Item
  nameWithType: UnmanagedBuffer<T>.Item
  fullName: piine.Memory.UnmanagedBuffer<T>.Item
  nameWithType.vb: UnmanagedBuffer(Of T).Item
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Item
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: piine.Memory.UnmanagedBuffer`1.#ctor*
  commentId: Overload:piine.Memory.UnmanagedBuffer`1.#ctor
  name: UnmanagedBuffer
  nameWithType: UnmanagedBuffer<T>.UnmanagedBuffer
  fullName: piine.Memory.UnmanagedBuffer<T>.UnmanagedBuffer
  nameWithType.vb: UnmanagedBuffer(Of T).UnmanagedBuffer
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).UnmanagedBuffer
- uid: '{T}*'
  isExternal: true
  name: T*
  nameWithType: T*
  fullName: T*
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: piine.Memory.UnmanagedBuffer`1.GetPointer*
  commentId: Overload:piine.Memory.UnmanagedBuffer`1.GetPointer
  name: GetPointer
  nameWithType: UnmanagedBuffer<T>.GetPointer
  fullName: piine.Memory.UnmanagedBuffer<T>.GetPointer
  nameWithType.vb: UnmanagedBuffer(Of T).GetPointer
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).GetPointer
- uid: piine.Memory.UnmanagedBuffer`1.op_Equality*
  commentId: Overload:piine.Memory.UnmanagedBuffer`1.op_Equality
  name: Equality
  nameWithType: UnmanagedBuffer<T>.Equality
  fullName: piine.Memory.UnmanagedBuffer<T>.Equality
  nameWithType.vb: UnmanagedBuffer(Of T).Equality
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Equality
- uid: piine.Memory.UnmanagedBuffer`1
  commentId: T:piine.Memory.UnmanagedBuffer`1
  parent: piine.Memory
  name: UnmanagedBuffer<T>
  nameWithType: UnmanagedBuffer<T>
  fullName: piine.Memory.UnmanagedBuffer<T>
  nameWithType.vb: UnmanagedBuffer(Of T)
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T)
  name.vb: UnmanagedBuffer(Of T)
  spec.csharp:
  - uid: piine.Memory.UnmanagedBuffer`1
    name: UnmanagedBuffer
    nameWithType: UnmanagedBuffer
    fullName: piine.Memory.UnmanagedBuffer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: piine.Memory.UnmanagedBuffer`1
    name: UnmanagedBuffer
    nameWithType: UnmanagedBuffer
    fullName: piine.Memory.UnmanagedBuffer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedBuffer`1.op_Inequality*
  commentId: Overload:piine.Memory.UnmanagedBuffer`1.op_Inequality
  name: Inequality
  nameWithType: UnmanagedBuffer<T>.Inequality
  fullName: piine.Memory.UnmanagedBuffer<T>.Inequality
  nameWithType.vb: UnmanagedBuffer(Of T).Inequality
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Inequality
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedBuffer`1.GetHashCode*
  commentId: Overload:piine.Memory.UnmanagedBuffer`1.GetHashCode
  name: GetHashCode
  nameWithType: UnmanagedBuffer<T>.GetHashCode
  fullName: piine.Memory.UnmanagedBuffer<T>.GetHashCode
  nameWithType.vb: UnmanagedBuffer(Of T).GetHashCode
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedBuffer`1.Equals*
  commentId: Overload:piine.Memory.UnmanagedBuffer`1.Equals
  name: Equals
  nameWithType: UnmanagedBuffer<T>.Equals
  fullName: piine.Memory.UnmanagedBuffer<T>.Equals
  nameWithType.vb: UnmanagedBuffer(Of T).Equals
  fullName.vb: piine.Memory.UnmanagedBuffer(Of T).Equals
- uid: System.IEquatable{piine.Memory.UnmanagedBuffer`1}.Equals(piine.Memory.UnmanagedBuffer{{T}})
  commentId: M:System.IEquatable{piine.Memory.UnmanagedBuffer`1}.Equals(piine.Memory.UnmanagedBuffer{`0})
  parent: System.IEquatable{piine.Memory.UnmanagedBuffer`1}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(UnmanagedBuffer<T>)
  nameWithType: IEquatable<UnmanagedBuffer<T>>.Equals(UnmanagedBuffer<T>)
  fullName: System.IEquatable<piine.Memory.UnmanagedBuffer<T>>.Equals(piine.Memory.UnmanagedBuffer<T>)
  nameWithType.vb: IEquatable(Of UnmanagedBuffer(Of T)).Equals(UnmanagedBuffer(Of T))
  fullName.vb: System.IEquatable(Of piine.Memory.UnmanagedBuffer(Of T)).Equals(piine.Memory.UnmanagedBuffer(Of T))
  name.vb: Equals(UnmanagedBuffer(Of T))
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<UnmanagedBuffer<T>>.Equals
    fullName: System.IEquatable<piine.Memory.UnmanagedBuffer<T>>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: piine.Memory.UnmanagedBuffer`1
    name: UnmanagedBuffer
    nameWithType: UnmanagedBuffer
    fullName: piine.Memory.UnmanagedBuffer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of UnmanagedBuffer(Of T)).Equals
    fullName: System.IEquatable(Of piine.Memory.UnmanagedBuffer(Of T)).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: piine.Memory.UnmanagedBuffer`1
    name: UnmanagedBuffer
    nameWithType: UnmanagedBuffer
    fullName: piine.Memory.UnmanagedBuffer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
