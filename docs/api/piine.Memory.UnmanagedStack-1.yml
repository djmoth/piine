### YamlMime:ManagedReference
items:
- uid: piine.Memory.UnmanagedStack`1
  commentId: T:piine.Memory.UnmanagedStack`1
  id: UnmanagedStack`1
  parent: piine.Memory
  children:
  - piine.Memory.UnmanagedStack`1.#ctor
  - piine.Memory.UnmanagedStack`1.#ctor(System.Int32)
  - piine.Memory.UnmanagedStack`1.Allocated
  - piine.Memory.UnmanagedStack`1.Clear
  - piine.Memory.UnmanagedStack`1.CopyTo(System.Span{`0},System.Int32)
  - piine.Memory.UnmanagedStack`1.Count
  - piine.Memory.UnmanagedStack`1.Dispose
  - piine.Memory.UnmanagedStack`1.Dispose(System.Boolean)
  - piine.Memory.UnmanagedStack`1.Finalize
  - piine.Memory.UnmanagedStack`1.GetEnumerator
  - piine.Memory.UnmanagedStack`1.GetInternalPointer
  - piine.Memory.UnmanagedStack`1.Peek
  - piine.Memory.UnmanagedStack`1.Pop
  - piine.Memory.UnmanagedStack`1.Push(`0)
  - piine.Memory.UnmanagedStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - piine.Memory.UnmanagedStack`1.System#Collections#IEnumerable#GetEnumerator
  - piine.Memory.UnmanagedStack`1.TrimExcess
  langs:
  - csharp
  - vb
  name: UnmanagedStack<T>
  nameWithType: UnmanagedStack<T>
  fullName: piine.Memory.UnmanagedStack<T>
  type: Class
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: UnmanagedStack
    path: src/Memory/UnmanagedStack.cs
    startLine: 8
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: 'public class UnmanagedStack<T> : IEnumerable<T>, IEnumerable, IDisposable where T : struct'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class UnmanagedStack(Of T As Structure)
          Implements IEnumerable(Of T), IEnumerable, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: UnmanagedStack(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: piine.Memory.UnmanagedStack(Of T)
  name.vb: UnmanagedStack(Of T)
- uid: piine.Memory.UnmanagedStack`1.Count
  commentId: P:piine.Memory.UnmanagedStack`1.Count
  id: Count
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: UnmanagedStack<T>.Count
  fullName: piine.Memory.UnmanagedStack<T>.Count
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Count
    path: src/Memory/UnmanagedStack.cs
    startLine: 23
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nNumber of elements in the stack\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: piine.Memory.UnmanagedStack`1.Count*
  nameWithType.vb: UnmanagedStack(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Count
- uid: piine.Memory.UnmanagedStack`1.Allocated
  commentId: P:piine.Memory.UnmanagedStack`1.Allocated
  id: Allocated
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: Allocated
  nameWithType: UnmanagedStack<T>.Allocated
  fullName: piine.Memory.UnmanagedStack<T>.Allocated
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Allocated
    path: src/Memory/UnmanagedStack.cs
    startLine: 27
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nSet to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> when the <xref href=\"piine.Memory.UnmanagedStack%601\" data-throw-if-not-resolved=\"false\"></xref> is disposed\n"
  example: []
  syntax:
    content: public bool Allocated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Allocated As Boolean
  overload: piine.Memory.UnmanagedStack`1.Allocated*
  nameWithType.vb: UnmanagedStack(Of T).Allocated
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Allocated
- uid: piine.Memory.UnmanagedStack`1.#ctor
  commentId: M:piine.Memory.UnmanagedStack`1.#ctor
  id: '#ctor'
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: UnmanagedStack()
  nameWithType: UnmanagedStack<T>.UnmanagedStack()
  fullName: piine.Memory.UnmanagedStack<T>.UnmanagedStack()
  type: Constructor
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: .ctor
    path: src/Memory/UnmanagedStack.cs
    startLine: 29
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public UnmanagedStack()
    content.vb: Public Sub New
  overload: piine.Memory.UnmanagedStack`1.#ctor*
  nameWithType.vb: UnmanagedStack(Of T).UnmanagedStack()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedStack(Of T).UnmanagedStack()
- uid: piine.Memory.UnmanagedStack`1.#ctor(System.Int32)
  commentId: M:piine.Memory.UnmanagedStack`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: UnmanagedStack(Int32)
  nameWithType: UnmanagedStack<T>.UnmanagedStack(Int32)
  fullName: piine.Memory.UnmanagedStack<T>.UnmanagedStack(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: .ctor
    path: src/Memory/UnmanagedStack.cs
    startLine: 31
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public UnmanagedStack(int capacity)
    parameters:
    - id: capacity
      type: System.Int32
    content.vb: Public Sub New(capacity As Integer)
  overload: piine.Memory.UnmanagedStack`1.#ctor*
  nameWithType.vb: UnmanagedStack(Of T).UnmanagedStack(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedStack(Of T).UnmanagedStack(System.Int32)
- uid: piine.Memory.UnmanagedStack`1.GetInternalPointer
  commentId: M:piine.Memory.UnmanagedStack`1.GetInternalPointer
  id: GetInternalPointer
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: GetInternalPointer()
  nameWithType: UnmanagedStack<T>.GetInternalPointer()
  fullName: piine.Memory.UnmanagedStack<T>.GetInternalPointer()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: GetInternalPointer
    path: src/Memory/UnmanagedStack.cs
    startLine: 68
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nGet the underlying pointer. Be mindful when working with this.\n"
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public T*GetInternalPointer()
    return:
      type: '{T}*'
    content.vb: >-
      <CLSCompliant(False)>

      Public Function GetInternalPointer As T
  overload: piine.Memory.UnmanagedStack`1.GetInternalPointer*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: UnmanagedStack(Of T).GetInternalPointer()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedStack(Of T).GetInternalPointer()
- uid: piine.Memory.UnmanagedStack`1.Push(`0)
  commentId: M:piine.Memory.UnmanagedStack`1.Push(`0)
  id: Push(`0)
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: Push(T)
  nameWithType: UnmanagedStack<T>.Push(T)
  fullName: piine.Memory.UnmanagedStack<T>.Push(T)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Push
    path: src/Memory/UnmanagedStack.cs
    startLine: 80
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nPushes a new element onto the stack. Will double the Capacity if there is not enough space.\n"
  example: []
  syntax:
    content: public void Push(T item)
    parameters:
    - id: item
      type: '{T}'
      description: ''
    content.vb: Public Sub Push(item As T)
  overload: piine.Memory.UnmanagedStack`1.Push*
  nameWithType.vb: UnmanagedStack(Of T).Push(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Push(T)
- uid: piine.Memory.UnmanagedStack`1.Pop
  commentId: M:piine.Memory.UnmanagedStack`1.Pop
  id: Pop
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: Pop()
  nameWithType: UnmanagedStack<T>.Pop()
  fullName: piine.Memory.UnmanagedStack<T>.Pop()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Pop
    path: src/Memory/UnmanagedStack.cs
    startLine: 94
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nPops an element off the stack. Preserves Capacity.\n"
  example: []
  syntax:
    content: public T Pop()
    return:
      type: '{T}'
    content.vb: Public Function Pop As T
  overload: piine.Memory.UnmanagedStack`1.Pop*
  nameWithType.vb: UnmanagedStack(Of T).Pop()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Pop()
- uid: piine.Memory.UnmanagedStack`1.Peek
  commentId: M:piine.Memory.UnmanagedStack`1.Peek
  id: Peek
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: Peek()
  nameWithType: UnmanagedStack<T>.Peek()
  fullName: piine.Memory.UnmanagedStack<T>.Peek()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Peek
    path: src/Memory/UnmanagedStack.cs
    startLine: 110
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nGets a pointer to the element on the top of the stack.\n"
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public T*Peek()
    return:
      type: '{T}*'
      description: Pointer to the element on top of the stack. Null if stack is empty.
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Peek As T
  overload: piine.Memory.UnmanagedStack`1.Peek*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: UnmanagedStack(Of T).Peek()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Peek()
- uid: piine.Memory.UnmanagedStack`1.TrimExcess
  commentId: M:piine.Memory.UnmanagedStack`1.TrimExcess
  id: TrimExcess
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: TrimExcess()
  nameWithType: UnmanagedStack<T>.TrimExcess()
  fullName: piine.Memory.UnmanagedStack<T>.TrimExcess()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: TrimExcess
    path: src/Memory/UnmanagedStack.cs
    startLine: 124
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nTries to trim unused memory by reallocating the internal array to match Count. Will not do anything if the Count is more than 90% of Capacity.\n"
  example: []
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
  overload: piine.Memory.UnmanagedStack`1.TrimExcess*
  nameWithType.vb: UnmanagedStack(Of T).TrimExcess()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedStack(Of T).TrimExcess()
- uid: piine.Memory.UnmanagedStack`1.Clear
  commentId: M:piine.Memory.UnmanagedStack`1.Clear
  id: Clear
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: UnmanagedStack<T>.Clear()
  fullName: piine.Memory.UnmanagedStack<T>.Clear()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Clear
    path: src/Memory/UnmanagedStack.cs
    startLine: 137
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nClears the list by setting Count to 0. Preserves Capacity.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: piine.Memory.UnmanagedStack`1.Clear*
  nameWithType.vb: UnmanagedStack(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Clear()
- uid: piine.Memory.UnmanagedStack`1.CopyTo(System.Span{`0},System.Int32)
  commentId: M:piine.Memory.UnmanagedStack`1.CopyTo(System.Span{`0},System.Int32)
  id: CopyTo(System.Span{`0},System.Int32)
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: CopyTo(Span<T>, Int32)
  nameWithType: UnmanagedStack<T>.CopyTo(Span<T>, Int32)
  fullName: piine.Memory.UnmanagedStack<T>.CopyTo(System.Span<T>, System.Int32)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: CopyTo
    path: src/Memory/UnmanagedStack.cs
    startLine: 144
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public void CopyTo(Span<T> destination, int destinationIndex)
    parameters:
    - id: destination
      type: System.Span{{T}}
    - id: destinationIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(destination As Span(Of T), destinationIndex As Integer)
  overload: piine.Memory.UnmanagedStack`1.CopyTo*
  nameWithType.vb: UnmanagedStack(Of T).CopyTo(Span(Of T), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedStack(Of T).CopyTo(System.Span(Of T), System.Int32)
  name.vb: CopyTo(Span(Of T), Int32)
- uid: piine.Memory.UnmanagedStack`1.GetEnumerator
  commentId: M:piine.Memory.UnmanagedStack`1.GetEnumerator
  id: GetEnumerator
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: UnmanagedStack<T>.GetEnumerator()
  fullName: piine.Memory.UnmanagedStack<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: GetEnumerator
    path: src/Memory/UnmanagedStack.cs
    startLine: 163
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public UnmanagedStack<T>.Enumerator GetEnumerator()
    return:
      type: piine.Memory.UnmanagedStack`1.Enumerator
    content.vb: Public Function GetEnumerator As UnmanagedStack(Of T).Enumerator
  overload: piine.Memory.UnmanagedStack`1.GetEnumerator*
  nameWithType.vb: UnmanagedStack(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedStack(Of T).GetEnumerator()
- uid: piine.Memory.UnmanagedStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:piine.Memory.UnmanagedStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: UnmanagedStack<T>.IEnumerable<T>.GetEnumerator()
  fullName: piine.Memory.UnmanagedStack<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    path: src/Memory/UnmanagedStack.cs
    startLine: 170
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
  overload: piine.Memory.UnmanagedStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: UnmanagedStack(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: piine.Memory.UnmanagedStack(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
- uid: piine.Memory.UnmanagedStack`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:piine.Memory.UnmanagedStack`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: UnmanagedStack<T>.IEnumerable.GetEnumerator()
  fullName: piine.Memory.UnmanagedStack<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Memory/UnmanagedStack.cs
    startLine: 172
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: piine.Memory.UnmanagedStack`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: UnmanagedStack(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: piine.Memory.UnmanagedStack(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: piine.Memory.UnmanagedStack`1.Finalize
  commentId: M:piine.Memory.UnmanagedStack`1.Finalize
  id: Finalize
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: UnmanagedStack<T>.Finalize()
  fullName: piine.Memory.UnmanagedStack<T>.Finalize()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Finalize
    path: src/Memory/UnmanagedStack.cs
    startLine: 179
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: piine.Memory.UnmanagedStack`1.Finalize*
  nameWithType.vb: UnmanagedStack(Of T).Finalize()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Finalize()
- uid: piine.Memory.UnmanagedStack`1.Dispose
  commentId: M:piine.Memory.UnmanagedStack`1.Dispose
  id: Dispose
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: UnmanagedStack<T>.Dispose()
  fullName: piine.Memory.UnmanagedStack<T>.Dispose()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Dispose
    path: src/Memory/UnmanagedStack.cs
    startLine: 184
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nFree the unmanaged memory. The list will not be usable afterwards\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: piine.Memory.UnmanagedStack`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: UnmanagedStack(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Dispose()
- uid: piine.Memory.UnmanagedStack`1.Dispose(System.Boolean)
  commentId: M:piine.Memory.UnmanagedStack`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: piine.Memory.UnmanagedStack`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: UnmanagedStack<T>.Dispose(Boolean)
  fullName: piine.Memory.UnmanagedStack<T>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedStack.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Dispose
    path: src/Memory/UnmanagedStack.cs
    startLine: 190
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: protected virtual void Dispose(bool fromDispose)
    parameters:
    - id: fromDispose
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(fromDispose As Boolean)
  overload: piine.Memory.UnmanagedStack`1.Dispose*
  nameWithType.vb: UnmanagedStack(Of T).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Dispose(System.Boolean)
references:
- uid: piine.Memory
  commentId: N:piine.Memory
  name: piine.Memory
  nameWithType: piine.Memory
  fullName: piine.Memory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: piine.Memory.UnmanagedStack`1.Count*
  commentId: Overload:piine.Memory.UnmanagedStack`1.Count
  name: Count
  nameWithType: UnmanagedStack<T>.Count
  fullName: piine.Memory.UnmanagedStack<T>.Count
  nameWithType.vb: UnmanagedStack(Of T).Count
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: piine.Memory.UnmanagedStack`1
  commentId: T:piine.Memory.UnmanagedStack`1
  parent: piine.Memory
  name: UnmanagedStack<T>
  nameWithType: UnmanagedStack<T>
  fullName: piine.Memory.UnmanagedStack<T>
  nameWithType.vb: UnmanagedStack(Of T)
  fullName.vb: piine.Memory.UnmanagedStack(Of T)
  name.vb: UnmanagedStack(Of T)
  spec.csharp:
  - uid: piine.Memory.UnmanagedStack`1
    name: UnmanagedStack
    nameWithType: UnmanagedStack
    fullName: piine.Memory.UnmanagedStack
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: piine.Memory.UnmanagedStack`1
    name: UnmanagedStack
    nameWithType: UnmanagedStack
    fullName: piine.Memory.UnmanagedStack
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedStack`1.Allocated*
  commentId: Overload:piine.Memory.UnmanagedStack`1.Allocated
  name: Allocated
  nameWithType: UnmanagedStack<T>.Allocated
  fullName: piine.Memory.UnmanagedStack<T>.Allocated
  nameWithType.vb: UnmanagedStack(Of T).Allocated
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Allocated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: piine.Memory.UnmanagedStack`1.#ctor*
  commentId: Overload:piine.Memory.UnmanagedStack`1.#ctor
  name: UnmanagedStack
  nameWithType: UnmanagedStack<T>.UnmanagedStack
  fullName: piine.Memory.UnmanagedStack<T>.UnmanagedStack
  nameWithType.vb: UnmanagedStack(Of T).UnmanagedStack
  fullName.vb: piine.Memory.UnmanagedStack(Of T).UnmanagedStack
- uid: piine.Memory.UnmanagedStack`1.GetInternalPointer*
  commentId: Overload:piine.Memory.UnmanagedStack`1.GetInternalPointer
  name: GetInternalPointer
  nameWithType: UnmanagedStack<T>.GetInternalPointer
  fullName: piine.Memory.UnmanagedStack<T>.GetInternalPointer
  nameWithType.vb: UnmanagedStack(Of T).GetInternalPointer
  fullName.vb: piine.Memory.UnmanagedStack(Of T).GetInternalPointer
- uid: '{T}*'
  isExternal: true
  name: T*
  nameWithType: T*
  fullName: T*
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: piine.Memory.UnmanagedStack`1.Push*
  commentId: Overload:piine.Memory.UnmanagedStack`1.Push
  name: Push
  nameWithType: UnmanagedStack<T>.Push
  fullName: piine.Memory.UnmanagedStack<T>.Push
  nameWithType.vb: UnmanagedStack(Of T).Push
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Push
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: piine.Memory.UnmanagedStack`1.Pop*
  commentId: Overload:piine.Memory.UnmanagedStack`1.Pop
  name: Pop
  nameWithType: UnmanagedStack<T>.Pop
  fullName: piine.Memory.UnmanagedStack<T>.Pop
  nameWithType.vb: UnmanagedStack(Of T).Pop
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Pop
- uid: piine.Memory.UnmanagedStack`1.Peek*
  commentId: Overload:piine.Memory.UnmanagedStack`1.Peek
  name: Peek
  nameWithType: UnmanagedStack<T>.Peek
  fullName: piine.Memory.UnmanagedStack<T>.Peek
  nameWithType.vb: UnmanagedStack(Of T).Peek
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Peek
- uid: piine.Memory.UnmanagedStack`1.TrimExcess*
  commentId: Overload:piine.Memory.UnmanagedStack`1.TrimExcess
  name: TrimExcess
  nameWithType: UnmanagedStack<T>.TrimExcess
  fullName: piine.Memory.UnmanagedStack<T>.TrimExcess
  nameWithType.vb: UnmanagedStack(Of T).TrimExcess
  fullName.vb: piine.Memory.UnmanagedStack(Of T).TrimExcess
- uid: piine.Memory.UnmanagedStack`1.Clear*
  commentId: Overload:piine.Memory.UnmanagedStack`1.Clear
  name: Clear
  nameWithType: UnmanagedStack<T>.Clear
  fullName: piine.Memory.UnmanagedStack<T>.Clear
  nameWithType.vb: UnmanagedStack(Of T).Clear
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Clear
- uid: piine.Memory.UnmanagedStack`1.CopyTo*
  commentId: Overload:piine.Memory.UnmanagedStack`1.CopyTo
  name: CopyTo
  nameWithType: UnmanagedStack<T>.CopyTo
  fullName: piine.Memory.UnmanagedStack<T>.CopyTo
  nameWithType.vb: UnmanagedStack(Of T).CopyTo
  fullName.vb: piine.Memory.UnmanagedStack(Of T).CopyTo
- uid: System.Span{{T}}
  commentId: T:System.Span{`0}
  parent: System
  definition: System.Span`1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedStack`1.GetEnumerator*
  commentId: Overload:piine.Memory.UnmanagedStack`1.GetEnumerator
  name: GetEnumerator
  nameWithType: UnmanagedStack<T>.GetEnumerator
  fullName: piine.Memory.UnmanagedStack<T>.GetEnumerator
  nameWithType.vb: UnmanagedStack(Of T).GetEnumerator
  fullName.vb: piine.Memory.UnmanagedStack(Of T).GetEnumerator
- uid: piine.Memory.UnmanagedStack`1.Enumerator
  commentId: T:piine.Memory.UnmanagedStack`1.Enumerator
  parent: piine.Memory
  name: UnmanagedStack.Enumerator<>
  nameWithType: UnmanagedStack.Enumerator<>
  fullName: piine.Memory.UnmanagedStack.Enumerator<>
  nameWithType.vb: UnmanagedStack.Enumerator(Of )
  fullName.vb: piine.Memory.UnmanagedStack.Enumerator(Of )
  name.vb: UnmanagedStack.Enumerator(Of )
  spec.csharp:
  - uid: piine.Memory.UnmanagedStack`1.Enumerator
    name: UnmanagedStack.Enumerator
    nameWithType: UnmanagedStack.Enumerator
    fullName: piine.Memory.UnmanagedStack.Enumerator
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: piine.Memory.UnmanagedStack`1.Enumerator
    name: UnmanagedStack.Enumerator
    nameWithType: UnmanagedStack.Enumerator
    fullName: piine.Memory.UnmanagedStack.Enumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  commentId: Overload:piine.Memory.UnmanagedStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<T>.GetEnumerator
  nameWithType: UnmanagedStack<T>.IEnumerable<T>.GetEnumerator
  fullName: piine.Memory.UnmanagedStack<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType.vb: UnmanagedStack(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  fullName.vb: piine.Memory.UnmanagedStack(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedStack`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:piine.Memory.UnmanagedStack`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: UnmanagedStack<T>.IEnumerable.GetEnumerator
  fullName: piine.Memory.UnmanagedStack<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: UnmanagedStack(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: piine.Memory.UnmanagedStack(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: piine.Memory.UnmanagedStack`1.Finalize*
  commentId: Overload:piine.Memory.UnmanagedStack`1.Finalize
  name: Finalize
  nameWithType: UnmanagedStack<T>.Finalize
  fullName: piine.Memory.UnmanagedStack<T>.Finalize
  nameWithType.vb: UnmanagedStack(Of T).Finalize
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Finalize
- uid: piine.Memory.UnmanagedStack`1.Dispose*
  commentId: Overload:piine.Memory.UnmanagedStack`1.Dispose
  name: Dispose
  nameWithType: UnmanagedStack<T>.Dispose
  fullName: piine.Memory.UnmanagedStack<T>.Dispose
  nameWithType.vb: UnmanagedStack(Of T).Dispose
  fullName.vb: piine.Memory.UnmanagedStack(Of T).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
