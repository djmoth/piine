### YamlMime:ManagedReference
items:
- uid: piine.Memory.UnmanagedDictionary`2
  commentId: T:piine.Memory.UnmanagedDictionary`2
  id: UnmanagedDictionary`2
  parent: piine.Memory
  children:
  - piine.Memory.UnmanagedDictionary`2.#ctor
  - piine.Memory.UnmanagedDictionary`2.Add(`0,`1)
  - piine.Memory.UnmanagedDictionary`2.Allocated
  - piine.Memory.UnmanagedDictionary`2.ContainsKey(`0)
  - piine.Memory.UnmanagedDictionary`2.Count
  - piine.Memory.UnmanagedDictionary`2.Dispose
  - piine.Memory.UnmanagedDictionary`2.Dispose(System.Boolean)
  - piine.Memory.UnmanagedDictionary`2.Finalize
  - piine.Memory.UnmanagedDictionary`2.Item(`0)
  - piine.Memory.UnmanagedDictionary`2.Remove(`0)
  - piine.Memory.UnmanagedDictionary`2.TryAdd(`0,`1)
  - piine.Memory.UnmanagedDictionary`2.TryGetValue(`0,`1@)
  langs:
  - csharp
  - vb
  name: UnmanagedDictionary<TKey, TValue>
  nameWithType: UnmanagedDictionary<TKey, TValue>
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: UnmanagedDictionary
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 6
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: 'public class UnmanagedDictionary<TKey, TValue> : IDisposable where TKey : struct, IEquatable<TKey> where TValue : struct'
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      Public Class UnmanagedDictionary(Of TKey As {Structure, IEquatable(Of TKey)}, TValue As Structure)
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue)
  name.vb: UnmanagedDictionary(Of TKey, TValue)
- uid: piine.Memory.UnmanagedDictionary`2.Count
  commentId: P:piine.Memory.UnmanagedDictionary`2.Count
  id: Count
  parent: piine.Memory.UnmanagedDictionary`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: UnmanagedDictionary<TKey, TValue>.Count
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Count
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Count
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 14
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: piine.Memory.UnmanagedDictionary`2.Count*
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Count
- uid: piine.Memory.UnmanagedDictionary`2.Allocated
  commentId: P:piine.Memory.UnmanagedDictionary`2.Allocated
  id: Allocated
  parent: piine.Memory.UnmanagedDictionary`2
  langs:
  - csharp
  - vb
  name: Allocated
  nameWithType: UnmanagedDictionary<TKey, TValue>.Allocated
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Allocated
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Allocated
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 15
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public bool Allocated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Allocated As Boolean
  overload: piine.Memory.UnmanagedDictionary`2.Allocated*
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Allocated
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Allocated
- uid: piine.Memory.UnmanagedDictionary`2.Item(`0)
  commentId: P:piine.Memory.UnmanagedDictionary`2.Item(`0)
  id: Item(`0)
  parent: piine.Memory.UnmanagedDictionary`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  nameWithType: UnmanagedDictionary<TKey, TValue>.Item[TKey]
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: this[]
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 17
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: '{TValue}'
    content.vb: Public Property Item(key As TKey) As TValue
  overload: piine.Memory.UnmanagedDictionary`2.Item*
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Item(TKey)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: piine.Memory.UnmanagedDictionary`2.#ctor
  commentId: M:piine.Memory.UnmanagedDictionary`2.#ctor
  id: '#ctor'
  parent: piine.Memory.UnmanagedDictionary`2
  langs:
  - csharp
  - vb
  name: UnmanagedDictionary()
  nameWithType: UnmanagedDictionary<TKey, TValue>.UnmanagedDictionary()
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.UnmanagedDictionary()
  type: Constructor
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: .ctor
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 42
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public UnmanagedDictionary()
    content.vb: Public Sub New
  overload: piine.Memory.UnmanagedDictionary`2.#ctor*
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).UnmanagedDictionary()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).UnmanagedDictionary()
- uid: piine.Memory.UnmanagedDictionary`2.Add(`0,`1)
  commentId: M:piine.Memory.UnmanagedDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: piine.Memory.UnmanagedDictionary`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  nameWithType: UnmanagedDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Add
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 59
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public void Add(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    content.vb: Public Sub Add(key As TKey, value As TValue)
  overload: piine.Memory.UnmanagedDictionary`2.Add*
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Add(TKey, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Add(TKey, TValue)
- uid: piine.Memory.UnmanagedDictionary`2.TryAdd(`0,`1)
  commentId: M:piine.Memory.UnmanagedDictionary`2.TryAdd(`0,`1)
  id: TryAdd(`0,`1)
  parent: piine.Memory.UnmanagedDictionary`2
  langs:
  - csharp
  - vb
  name: TryAdd(TKey, TValue)
  nameWithType: UnmanagedDictionary<TKey, TValue>.TryAdd(TKey, TValue)
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.TryAdd(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: TryAdd
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 65
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public bool TryAdd(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function TryAdd(key As TKey, value As TValue) As Boolean
  overload: piine.Memory.UnmanagedDictionary`2.TryAdd*
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).TryAdd(TKey, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).TryAdd(TKey, TValue)
- uid: piine.Memory.UnmanagedDictionary`2.Remove(`0)
  commentId: M:piine.Memory.UnmanagedDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: piine.Memory.UnmanagedDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  nameWithType: UnmanagedDictionary<TKey, TValue>.Remove(TKey)
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Remove
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 86
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public bool Remove(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(key As TKey) As Boolean
  overload: piine.Memory.UnmanagedDictionary`2.Remove*
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Remove(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Remove(TKey)
- uid: piine.Memory.UnmanagedDictionary`2.ContainsKey(`0)
  commentId: M:piine.Memory.UnmanagedDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: piine.Memory.UnmanagedDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: UnmanagedDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: ContainsKey
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 95
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: piine.Memory.UnmanagedDictionary`2.ContainsKey*
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).ContainsKey(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: piine.Memory.UnmanagedDictionary`2.TryGetValue(`0,`1@)
  commentId: M:piine.Memory.UnmanagedDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: piine.Memory.UnmanagedDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  nameWithType: UnmanagedDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: TryGetValue
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 102
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
  overload: piine.Memory.UnmanagedDictionary`2.TryGetValue*
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
- uid: piine.Memory.UnmanagedDictionary`2.Finalize
  commentId: M:piine.Memory.UnmanagedDictionary`2.Finalize
  id: Finalize
  parent: piine.Memory.UnmanagedDictionary`2
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: UnmanagedDictionary<TKey, TValue>.Finalize()
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Finalize()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Finalize
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 162
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: piine.Memory.UnmanagedDictionary`2.Finalize*
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Finalize()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Finalize()
- uid: piine.Memory.UnmanagedDictionary`2.Dispose
  commentId: M:piine.Memory.UnmanagedDictionary`2.Dispose
  id: Dispose
  parent: piine.Memory.UnmanagedDictionary`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: UnmanagedDictionary<TKey, TValue>.Dispose()
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Dispose()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Dispose
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 164
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: piine.Memory.UnmanagedDictionary`2.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Dispose()
- uid: piine.Memory.UnmanagedDictionary`2.Dispose(System.Boolean)
  commentId: M:piine.Memory.UnmanagedDictionary`2.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: piine.Memory.UnmanagedDictionary`2
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: UnmanagedDictionary<TKey, TValue>.Dispose(Boolean)
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedDictionary.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Dispose
    path: src/Memory/UnmanagedDictionary.cs
    startLine: 173
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nFree the unmanaged memory. The dictionary will not be usable afterwards\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: piine.Memory.UnmanagedDictionary`2.Dispose*
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Dispose(System.Boolean)
references:
- uid: piine.Memory
  commentId: N:piine.Memory
  name: piine.Memory
  nameWithType: piine.Memory
  fullName: piine.Memory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: piine.Memory.UnmanagedDictionary`2.Count*
  commentId: Overload:piine.Memory.UnmanagedDictionary`2.Count
  name: Count
  nameWithType: UnmanagedDictionary<TKey, TValue>.Count
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Count
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Count
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: piine.Memory.UnmanagedDictionary`2.Allocated*
  commentId: Overload:piine.Memory.UnmanagedDictionary`2.Allocated
  name: Allocated
  nameWithType: UnmanagedDictionary<TKey, TValue>.Allocated
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Allocated
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Allocated
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Allocated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: piine.Memory.UnmanagedDictionary`2.Item*
  commentId: Overload:piine.Memory.UnmanagedDictionary`2.Item
  name: Item
  nameWithType: UnmanagedDictionary<TKey, TValue>.Item
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Item
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Item
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Item
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: piine.Memory.UnmanagedDictionary`2.#ctor*
  commentId: Overload:piine.Memory.UnmanagedDictionary`2.#ctor
  name: UnmanagedDictionary
  nameWithType: UnmanagedDictionary<TKey, TValue>.UnmanagedDictionary
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.UnmanagedDictionary
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).UnmanagedDictionary
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).UnmanagedDictionary
- uid: piine.Memory.UnmanagedDictionary`2.Add*
  commentId: Overload:piine.Memory.UnmanagedDictionary`2.Add
  name: Add
  nameWithType: UnmanagedDictionary<TKey, TValue>.Add
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Add
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Add
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Add
- uid: piine.Memory.UnmanagedDictionary`2.TryAdd*
  commentId: Overload:piine.Memory.UnmanagedDictionary`2.TryAdd
  name: TryAdd
  nameWithType: UnmanagedDictionary<TKey, TValue>.TryAdd
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.TryAdd
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).TryAdd
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).TryAdd
- uid: piine.Memory.UnmanagedDictionary`2.Remove*
  commentId: Overload:piine.Memory.UnmanagedDictionary`2.Remove
  name: Remove
  nameWithType: UnmanagedDictionary<TKey, TValue>.Remove
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Remove
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Remove
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Remove
- uid: piine.Memory.UnmanagedDictionary`2.ContainsKey*
  commentId: Overload:piine.Memory.UnmanagedDictionary`2.ContainsKey
  name: ContainsKey
  nameWithType: UnmanagedDictionary<TKey, TValue>.ContainsKey
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.ContainsKey
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).ContainsKey
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).ContainsKey
- uid: piine.Memory.UnmanagedDictionary`2.TryGetValue*
  commentId: Overload:piine.Memory.UnmanagedDictionary`2.TryGetValue
  name: TryGetValue
  nameWithType: UnmanagedDictionary<TKey, TValue>.TryGetValue
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.TryGetValue
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).TryGetValue
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).TryGetValue
- uid: piine.Memory.UnmanagedDictionary`2.Finalize*
  commentId: Overload:piine.Memory.UnmanagedDictionary`2.Finalize
  name: Finalize
  nameWithType: UnmanagedDictionary<TKey, TValue>.Finalize
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Finalize
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Finalize
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Finalize
- uid: piine.Memory.UnmanagedDictionary`2.Dispose*
  commentId: Overload:piine.Memory.UnmanagedDictionary`2.Dispose
  name: Dispose
  nameWithType: UnmanagedDictionary<TKey, TValue>.Dispose
  fullName: piine.Memory.UnmanagedDictionary<TKey, TValue>.Dispose
  nameWithType.vb: UnmanagedDictionary(Of TKey, TValue).Dispose
  fullName.vb: piine.Memory.UnmanagedDictionary(Of TKey, TValue).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
