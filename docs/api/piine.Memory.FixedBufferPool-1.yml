### YamlMime:ManagedReference
items:
- uid: piine.Memory.FixedBufferPool`1
  commentId: T:piine.Memory.FixedBufferPool`1
  id: FixedBufferPool`1
  parent: piine.Memory
  children:
  - piine.Memory.FixedBufferPool`1.#ctor(System.Int32,System.Int32)
  - piine.Memory.FixedBufferPool`1.Allocate(System.Boolean)
  - piine.Memory.FixedBufferPool`1.Allocated
  - piine.Memory.FixedBufferPool`1.AllocatedBufferCount
  - piine.Memory.FixedBufferPool`1.BufferSize
  - piine.Memory.FixedBufferPool`1.Dispose
  - piine.Memory.FixedBufferPool`1.Dispose(System.Boolean)
  - piine.Memory.FixedBufferPool`1.Finalize
  - piine.Memory.FixedBufferPool`1.Free(`0*@)
  - piine.Memory.FixedBufferPool`1.PoolSize
  langs:
  - csharp
  - vb
  name: FixedBufferPool<T>
  nameWithType: FixedBufferPool<T>
  fullName: piine.Memory.FixedBufferPool<T>
  type: Class
  source:
    remote:
      path: src/Memory/FixedBufferPool.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: FixedBufferPool
    path: src/Memory/FixedBufferPool.cs
    startLine: 11
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: 'public class FixedBufferPool<T> : IDisposable where T : struct'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class FixedBufferPool(Of T As Structure)
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: FixedBufferPool(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: piine.Memory.FixedBufferPool(Of T)
  name.vb: FixedBufferPool(Of T)
- uid: piine.Memory.FixedBufferPool`1.PoolSize
  commentId: P:piine.Memory.FixedBufferPool`1.PoolSize
  id: PoolSize
  parent: piine.Memory.FixedBufferPool`1
  langs:
  - csharp
  - vb
  name: PoolSize
  nameWithType: FixedBufferPool<T>.PoolSize
  fullName: piine.Memory.FixedBufferPool<T>.PoolSize
  type: Property
  source:
    remote:
      path: src/Memory/FixedBufferPool.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: PoolSize
    path: src/Memory/FixedBufferPool.cs
    startLine: 20
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nTotal number of buffers\n"
  example: []
  syntax:
    content: public int PoolSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property PoolSize As Integer
  overload: piine.Memory.FixedBufferPool`1.PoolSize*
  nameWithType.vb: FixedBufferPool(Of T).PoolSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.FixedBufferPool(Of T).PoolSize
- uid: piine.Memory.FixedBufferPool`1.BufferSize
  commentId: P:piine.Memory.FixedBufferPool`1.BufferSize
  id: BufferSize
  parent: piine.Memory.FixedBufferPool`1
  langs:
  - csharp
  - vb
  name: BufferSize
  nameWithType: FixedBufferPool<T>.BufferSize
  fullName: piine.Memory.FixedBufferPool<T>.BufferSize
  type: Property
  source:
    remote:
      path: src/Memory/FixedBufferPool.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: BufferSize
    path: src/Memory/FixedBufferPool.cs
    startLine: 24
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nNumber of elements in each buffer\n"
  example: []
  syntax:
    content: public int BufferSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property BufferSize As Integer
  overload: piine.Memory.FixedBufferPool`1.BufferSize*
  nameWithType.vb: FixedBufferPool(Of T).BufferSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.FixedBufferPool(Of T).BufferSize
- uid: piine.Memory.FixedBufferPool`1.AllocatedBufferCount
  commentId: P:piine.Memory.FixedBufferPool`1.AllocatedBufferCount
  id: AllocatedBufferCount
  parent: piine.Memory.FixedBufferPool`1
  langs:
  - csharp
  - vb
  name: AllocatedBufferCount
  nameWithType: FixedBufferPool<T>.AllocatedBufferCount
  fullName: piine.Memory.FixedBufferPool<T>.AllocatedBufferCount
  type: Property
  source:
    remote:
      path: src/Memory/FixedBufferPool.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: AllocatedBufferCount
    path: src/Memory/FixedBufferPool.cs
    startLine: 28
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nNumber of allocated buffers\n"
  example: []
  syntax:
    content: public int AllocatedBufferCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property AllocatedBufferCount As Integer
  overload: piine.Memory.FixedBufferPool`1.AllocatedBufferCount*
  nameWithType.vb: FixedBufferPool(Of T).AllocatedBufferCount
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.FixedBufferPool(Of T).AllocatedBufferCount
- uid: piine.Memory.FixedBufferPool`1.Allocated
  commentId: P:piine.Memory.FixedBufferPool`1.Allocated
  id: Allocated
  parent: piine.Memory.FixedBufferPool`1
  langs:
  - csharp
  - vb
  name: Allocated
  nameWithType: FixedBufferPool<T>.Allocated
  fullName: piine.Memory.FixedBufferPool<T>.Allocated
  type: Property
  source:
    remote:
      path: src/Memory/FixedBufferPool.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Allocated
    path: src/Memory/FixedBufferPool.cs
    startLine: 32
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nSet to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> when the <xref href=\"piine.Memory.FixedBufferPool%601\" data-throw-if-not-resolved=\"false\"></xref> is disposed\n"
  example: []
  syntax:
    content: public bool Allocated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Allocated As Boolean
  overload: piine.Memory.FixedBufferPool`1.Allocated*
  nameWithType.vb: FixedBufferPool(Of T).Allocated
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.FixedBufferPool(Of T).Allocated
- uid: piine.Memory.FixedBufferPool`1.#ctor(System.Int32,System.Int32)
  commentId: M:piine.Memory.FixedBufferPool`1.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: piine.Memory.FixedBufferPool`1
  langs:
  - csharp
  - vb
  name: FixedBufferPool(Int32, Int32)
  nameWithType: FixedBufferPool<T>.FixedBufferPool(Int32, Int32)
  fullName: piine.Memory.FixedBufferPool<T>.FixedBufferPool(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Memory/FixedBufferPool.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: .ctor
    path: src/Memory/FixedBufferPool.cs
    startLine: 39
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nConstructs a new <xref href=\"piine.Memory.FixedBufferPool%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public FixedBufferPool(int poolSize, int bufferSize)
    parameters:
    - id: poolSize
      type: System.Int32
      description: How many buffers the pool contains
    - id: bufferSize
      type: System.Int32
      description: The size of the individual buffers, in number of elements
    content.vb: Public Sub New(poolSize As Integer, bufferSize As Integer)
  overload: piine.Memory.FixedBufferPool`1.#ctor*
  nameWithType.vb: FixedBufferPool(Of T).FixedBufferPool(Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedBufferPool(Of T).FixedBufferPool(System.Int32, System.Int32)
- uid: piine.Memory.FixedBufferPool`1.Allocate(System.Boolean)
  commentId: M:piine.Memory.FixedBufferPool`1.Allocate(System.Boolean)
  id: Allocate(System.Boolean)
  parent: piine.Memory.FixedBufferPool`1
  langs:
  - csharp
  - vb
  name: Allocate(Boolean)
  nameWithType: FixedBufferPool<T>.Allocate(Boolean)
  fullName: piine.Memory.FixedBufferPool<T>.Allocate(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Memory/FixedBufferPool.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Allocate
    path: src/Memory/FixedBufferPool.cs
    startLine: 60
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nAllocates a new buffer from the pool.\n"
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public T*Allocate(bool fillWithDefault)
    parameters:
    - id: fillWithDefault
      type: System.Boolean
      description: If true, fills all the buffers with <code>default (T)</code>
    return:
      type: '{T}*'
      description: A pointer to the buffer. The pointer is <code>null</code> if the buffer is full
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Allocate(fillWithDefault As Boolean) As T
  overload: piine.Memory.FixedBufferPool`1.Allocate*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: FixedBufferPool(Of T).Allocate(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedBufferPool(Of T).Allocate(System.Boolean)
- uid: piine.Memory.FixedBufferPool`1.Free(`0*@)
  commentId: M:piine.Memory.FixedBufferPool`1.Free(`0*@)
  id: Free(`0*@)
  parent: piine.Memory.FixedBufferPool`1
  langs:
  - csharp
  - vb
  name: Free(ref T*)
  nameWithType: FixedBufferPool<T>.Free(ref T*)
  fullName: piine.Memory.FixedBufferPool<T>.Free(ref T*)
  type: Method
  source:
    remote:
      path: src/Memory/FixedBufferPool.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Free
    path: src/Memory/FixedBufferPool.cs
    startLine: 113
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nFrees an already allocated buffer from the pool. Does nothing if the buffer is already freed.\n"
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void Free(ref T*buffer)
    parameters:
    - id: buffer
      type: '{T}*'
      description: Pointer to the buffer to free. Is set to <code>null</code> afterwards
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub Free(ByRef buffer As T *)
  overload: piine.Memory.FixedBufferPool`1.Free*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: FixedBufferPool(Of T).Free(ByRef T*)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedBufferPool(Of T).Free(ByRef T*)
  name.vb: Free(ByRef T*)
- uid: piine.Memory.FixedBufferPool`1.Finalize
  commentId: M:piine.Memory.FixedBufferPool`1.Finalize
  id: Finalize
  parent: piine.Memory.FixedBufferPool`1
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: FixedBufferPool<T>.Finalize()
  fullName: piine.Memory.FixedBufferPool<T>.Finalize()
  type: Method
  source:
    remote:
      path: src/Memory/FixedBufferPool.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Finalize
    path: src/Memory/FixedBufferPool.cs
    startLine: 133
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: piine.Memory.FixedBufferPool`1.Finalize*
  nameWithType.vb: FixedBufferPool(Of T).Finalize()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: piine.Memory.FixedBufferPool(Of T).Finalize()
- uid: piine.Memory.FixedBufferPool`1.Dispose
  commentId: M:piine.Memory.FixedBufferPool`1.Dispose
  id: Dispose
  parent: piine.Memory.FixedBufferPool`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: FixedBufferPool<T>.Dispose()
  fullName: piine.Memory.FixedBufferPool<T>.Dispose()
  type: Method
  source:
    remote:
      path: src/Memory/FixedBufferPool.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Dispose
    path: src/Memory/FixedBufferPool.cs
    startLine: 138
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nFree the unmanaged memory. The pool will be unusable afterwards\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: piine.Memory.FixedBufferPool`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: FixedBufferPool(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedBufferPool(Of T).Dispose()
- uid: piine.Memory.FixedBufferPool`1.Dispose(System.Boolean)
  commentId: M:piine.Memory.FixedBufferPool`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: piine.Memory.FixedBufferPool`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: FixedBufferPool<T>.Dispose(Boolean)
  fullName: piine.Memory.FixedBufferPool<T>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Memory/FixedBufferPool.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Dispose
    path: src/Memory/FixedBufferPool.cs
    startLine: 144
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: piine.Memory.FixedBufferPool`1.Dispose*
  nameWithType.vb: FixedBufferPool(Of T).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: piine.Memory.FixedBufferPool(Of T).Dispose(System.Boolean)
references:
- uid: piine.Memory
  commentId: N:piine.Memory
  name: piine.Memory
  nameWithType: piine.Memory
  fullName: piine.Memory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: piine.Memory.FixedBufferPool`1.PoolSize*
  commentId: Overload:piine.Memory.FixedBufferPool`1.PoolSize
  name: PoolSize
  nameWithType: FixedBufferPool<T>.PoolSize
  fullName: piine.Memory.FixedBufferPool<T>.PoolSize
  nameWithType.vb: FixedBufferPool(Of T).PoolSize
  fullName.vb: piine.Memory.FixedBufferPool(Of T).PoolSize
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: piine.Memory.FixedBufferPool`1.BufferSize*
  commentId: Overload:piine.Memory.FixedBufferPool`1.BufferSize
  name: BufferSize
  nameWithType: FixedBufferPool<T>.BufferSize
  fullName: piine.Memory.FixedBufferPool<T>.BufferSize
  nameWithType.vb: FixedBufferPool(Of T).BufferSize
  fullName.vb: piine.Memory.FixedBufferPool(Of T).BufferSize
- uid: piine.Memory.FixedBufferPool`1.AllocatedBufferCount*
  commentId: Overload:piine.Memory.FixedBufferPool`1.AllocatedBufferCount
  name: AllocatedBufferCount
  nameWithType: FixedBufferPool<T>.AllocatedBufferCount
  fullName: piine.Memory.FixedBufferPool<T>.AllocatedBufferCount
  nameWithType.vb: FixedBufferPool(Of T).AllocatedBufferCount
  fullName.vb: piine.Memory.FixedBufferPool(Of T).AllocatedBufferCount
- uid: piine.Memory.FixedBufferPool`1
  commentId: T:piine.Memory.FixedBufferPool`1
  name: FixedBufferPool<T>
  nameWithType: FixedBufferPool<T>
  fullName: piine.Memory.FixedBufferPool<T>
  nameWithType.vb: FixedBufferPool(Of T)
  fullName.vb: piine.Memory.FixedBufferPool(Of T)
  name.vb: FixedBufferPool(Of T)
  spec.csharp:
  - uid: piine.Memory.FixedBufferPool`1
    name: FixedBufferPool
    nameWithType: FixedBufferPool
    fullName: piine.Memory.FixedBufferPool
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: piine.Memory.FixedBufferPool`1
    name: FixedBufferPool
    nameWithType: FixedBufferPool
    fullName: piine.Memory.FixedBufferPool
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.FixedBufferPool`1.Allocated*
  commentId: Overload:piine.Memory.FixedBufferPool`1.Allocated
  name: Allocated
  nameWithType: FixedBufferPool<T>.Allocated
  fullName: piine.Memory.FixedBufferPool<T>.Allocated
  nameWithType.vb: FixedBufferPool(Of T).Allocated
  fullName.vb: piine.Memory.FixedBufferPool(Of T).Allocated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: piine.Memory.FixedBufferPool`1.#ctor*
  commentId: Overload:piine.Memory.FixedBufferPool`1.#ctor
  name: FixedBufferPool
  nameWithType: FixedBufferPool<T>.FixedBufferPool
  fullName: piine.Memory.FixedBufferPool<T>.FixedBufferPool
  nameWithType.vb: FixedBufferPool(Of T).FixedBufferPool
  fullName.vb: piine.Memory.FixedBufferPool(Of T).FixedBufferPool
- uid: piine.Memory.FixedBufferPool`1.Allocate*
  commentId: Overload:piine.Memory.FixedBufferPool`1.Allocate
  name: Allocate
  nameWithType: FixedBufferPool<T>.Allocate
  fullName: piine.Memory.FixedBufferPool<T>.Allocate
  nameWithType.vb: FixedBufferPool(Of T).Allocate
  fullName.vb: piine.Memory.FixedBufferPool(Of T).Allocate
- uid: '{T}*'
  isExternal: true
  name: T*
  nameWithType: T*
  fullName: T*
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: piine.Memory.FixedBufferPool`1.Free*
  commentId: Overload:piine.Memory.FixedBufferPool`1.Free
  name: Free
  nameWithType: FixedBufferPool<T>.Free
  fullName: piine.Memory.FixedBufferPool<T>.Free
  nameWithType.vb: FixedBufferPool(Of T).Free
  fullName.vb: piine.Memory.FixedBufferPool(Of T).Free
- uid: piine.Memory.FixedBufferPool`1.Finalize*
  commentId: Overload:piine.Memory.FixedBufferPool`1.Finalize
  name: Finalize
  nameWithType: FixedBufferPool<T>.Finalize
  fullName: piine.Memory.FixedBufferPool<T>.Finalize
  nameWithType.vb: FixedBufferPool(Of T).Finalize
  fullName.vb: piine.Memory.FixedBufferPool(Of T).Finalize
- uid: piine.Memory.FixedBufferPool`1.Dispose*
  commentId: Overload:piine.Memory.FixedBufferPool`1.Dispose
  name: Dispose
  nameWithType: FixedBufferPool<T>.Dispose
  fullName: piine.Memory.FixedBufferPool<T>.Dispose
  nameWithType.vb: FixedBufferPool(Of T).Dispose
  fullName.vb: piine.Memory.FixedBufferPool(Of T).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
