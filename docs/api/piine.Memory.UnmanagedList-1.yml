### YamlMime:ManagedReference
items:
- uid: piine.Memory.UnmanagedList`1
  commentId: T:piine.Memory.UnmanagedList`1
  id: UnmanagedList`1
  parent: piine.Memory
  children:
  - piine.Memory.UnmanagedList`1.#ctor
  - piine.Memory.UnmanagedList`1.#ctor(System.Int32)
  - piine.Memory.UnmanagedList`1.Add(`0)
  - piine.Memory.UnmanagedList`1.Allocated
  - piine.Memory.UnmanagedList`1.Capacity
  - piine.Memory.UnmanagedList`1.Clear
  - piine.Memory.UnmanagedList`1.Contains(`0)
  - piine.Memory.UnmanagedList`1.CopyTo(`0[],System.Int32)
  - piine.Memory.UnmanagedList`1.Count
  - piine.Memory.UnmanagedList`1.Dispose
  - piine.Memory.UnmanagedList`1.Dispose(System.Boolean)
  - piine.Memory.UnmanagedList`1.Finalize
  - piine.Memory.UnmanagedList`1.GetEnumerator
  - piine.Memory.UnmanagedList`1.GetInternalPointer
  - piine.Memory.UnmanagedList`1.IndexOf(`0)
  - piine.Memory.UnmanagedList`1.Insert(System.Int32,`0)
  - piine.Memory.UnmanagedList`1.Item(System.Int32)
  - piine.Memory.UnmanagedList`1.Remove(`0)
  - piine.Memory.UnmanagedList`1.RemoveAt(System.Int32)
  - piine.Memory.UnmanagedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - piine.Memory.UnmanagedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - piine.Memory.UnmanagedList`1.System#Collections#IEnumerable#GetEnumerator
  - piine.Memory.UnmanagedList`1.TrimExcess
  langs:
  - csharp
  - vb
  name: UnmanagedList<T>
  nameWithType: UnmanagedList<T>
  fullName: piine.Memory.UnmanagedList<T>
  type: Class
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: UnmanagedList
    path: src/Memory/UnmanagedList.cs
    startLine: 11
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nA List stored in unmanaged memory. May help relieve pressure from the Garbage Collector\n"
  example: []
  syntax:
    content: 'public class UnmanagedList<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IDisposable where T : struct'
    typeParameters:
    - id: T
      description: The unmanaged type that the list will contain
    content.vb: >-
      Public Class UnmanagedList(Of T As Structure)
          Implements IList(Of T), ICollection(Of T), IEnumerable(Of T), IEnumerable, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: UnmanagedList(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: piine.Memory.UnmanagedList(Of T)
  name.vb: UnmanagedList(Of T)
- uid: piine.Memory.UnmanagedList`1.Count
  commentId: P:piine.Memory.UnmanagedList`1.Count
  id: Count
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: UnmanagedList<T>.Count
  fullName: piine.Memory.UnmanagedList<T>.Count
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Count
    path: src/Memory/UnmanagedList.cs
    startLine: 23
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nNumber of elements in the list\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: piine.Memory.UnmanagedList`1.Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  nameWithType.vb: UnmanagedList(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.UnmanagedList(Of T).Count
- uid: piine.Memory.UnmanagedList`1.Capacity
  commentId: P:piine.Memory.UnmanagedList`1.Capacity
  id: Capacity
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: Capacity
  nameWithType: UnmanagedList<T>.Capacity
  fullName: piine.Memory.UnmanagedList<T>.Capacity
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Capacity
    path: src/Memory/UnmanagedList.cs
    startLine: 27
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nSize of the internal array. Setting this value will resize the internal array. Cannot be less than Count.\n"
  example: []
  syntax:
    content: public int Capacity { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Capacity As Integer
  overload: piine.Memory.UnmanagedList`1.Capacity*
  nameWithType.vb: UnmanagedList(Of T).Capacity
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).Capacity
- uid: piine.Memory.UnmanagedList`1.Allocated
  commentId: P:piine.Memory.UnmanagedList`1.Allocated
  id: Allocated
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: Allocated
  nameWithType: UnmanagedList<T>.Allocated
  fullName: piine.Memory.UnmanagedList<T>.Allocated
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Allocated
    path: src/Memory/UnmanagedList.cs
    startLine: 31
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nSet to false when the object is disposed\n"
  example: []
  syntax:
    content: public bool Allocated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Allocated As Boolean
  overload: piine.Memory.UnmanagedList`1.Allocated*
  nameWithType.vb: UnmanagedList(Of T).Allocated
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.UnmanagedList(Of T).Allocated
- uid: piine.Memory.UnmanagedList`1.GetInternalPointer
  commentId: P:piine.Memory.UnmanagedList`1.GetInternalPointer
  id: GetInternalPointer
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: GetInternalPointer
  nameWithType: UnmanagedList<T>.GetInternalPointer
  fullName: piine.Memory.UnmanagedList<T>.GetInternalPointer
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: GetInternalPointer
    path: src/Memory/UnmanagedList.cs
    startLine: 35
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nReturn the underlying pointer for the list. Be mindful when working with this.\n"
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public T*GetInternalPointer { get; }
    parameters: []
    return:
      type: '{T}*'
    content.vb: >-
      <CLSCompliant(False)>

      Public ReadOnly Property GetInternalPointer As T
  overload: piine.Memory.UnmanagedList`1.GetInternalPointer*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: UnmanagedList(Of T).GetInternalPointer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.UnmanagedList(Of T).GetInternalPointer
- uid: piine.Memory.UnmanagedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:piine.Memory.UnmanagedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.IsReadOnly
  nameWithType: UnmanagedList<T>.ICollection<T>.IsReadOnly
  fullName: piine.Memory.UnmanagedList<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: System.Collections.Generic.ICollection<T>.IsReadOnly
    path: src/Memory/UnmanagedList.cs
    startLine: 40
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nAlways false\n"
  example: []
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
  overload: piine.Memory.UnmanagedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: UnmanagedList(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: piine.Memory.UnmanagedList(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: piine.Memory.UnmanagedList`1.Item(System.Int32)
  commentId: P:piine.Memory.UnmanagedList`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: UnmanagedList<T>.Item[Int32]
  fullName: piine.Memory.UnmanagedList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: this[]
    path: src/Memory/UnmanagedList.cs
    startLine: 46
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nAccess an element in the UnmanagedList. Performs bounds checking.\n"
  example: []
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: Zero-based index of element.
    return:
      type: '{T}'
    content.vb: Public Property Item(index As Integer) As T
  overload: piine.Memory.UnmanagedList`1.Item*
  implements:
  - System.Collections.Generic.IList{{T}}.Item(System.Int32)
  nameWithType.vb: UnmanagedList(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: piine.Memory.UnmanagedList`1.#ctor
  commentId: M:piine.Memory.UnmanagedList`1.#ctor
  id: '#ctor'
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: UnmanagedList()
  nameWithType: UnmanagedList<T>.UnmanagedList()
  fullName: piine.Memory.UnmanagedList<T>.UnmanagedList()
  type: Constructor
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: .ctor
    path: src/Memory/UnmanagedList.cs
    startLine: 68
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public UnmanagedList()
    content.vb: Public Sub New
  overload: piine.Memory.UnmanagedList`1.#ctor*
  nameWithType.vb: UnmanagedList(Of T).UnmanagedList()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).UnmanagedList()
- uid: piine.Memory.UnmanagedList`1.#ctor(System.Int32)
  commentId: M:piine.Memory.UnmanagedList`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: UnmanagedList(Int32)
  nameWithType: UnmanagedList<T>.UnmanagedList(Int32)
  fullName: piine.Memory.UnmanagedList<T>.UnmanagedList(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: .ctor
    path: src/Memory/UnmanagedList.cs
    startLine: 70
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public UnmanagedList(int capacity)
    parameters:
    - id: capacity
      type: System.Int32
    content.vb: Public Sub New(capacity As Integer)
  overload: piine.Memory.UnmanagedList`1.#ctor*
  nameWithType.vb: UnmanagedList(Of T).UnmanagedList(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).UnmanagedList(System.Int32)
- uid: piine.Memory.UnmanagedList`1.Add(`0)
  commentId: M:piine.Memory.UnmanagedList`1.Add(`0)
  id: Add(`0)
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: UnmanagedList<T>.Add(T)
  fullName: piine.Memory.UnmanagedList<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Add
    path: src/Memory/UnmanagedList.cs
    startLine: 107
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nAdd a new item to the end of the list. Will double the Capacity if there is not enough space.\n"
  example: []
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
      description: ''
    content.vb: Public Sub Add(item As T)
  overload: piine.Memory.UnmanagedList`1.Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: UnmanagedList(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).Add(T)
- uid: piine.Memory.UnmanagedList`1.Insert(System.Int32,`0)
  commentId: M:piine.Memory.UnmanagedList`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  nameWithType: UnmanagedList<T>.Insert(Int32, T)
  fullName: piine.Memory.UnmanagedList<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Insert
    path: src/Memory/UnmanagedList.cs
    startLine: 123
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nInsert a new item at a specific index. Moves the items at and above &apos;index&apos; 1 index up.\n"
  example: []
  syntax:
    content: public void Insert(int index, T item)
    parameters:
    - id: index
      type: System.Int32
      description: Index to insert the item at.
    - id: item
      type: '{T}'
      description: Item to insert.
    content.vb: Public Sub Insert(index As Integer, item As T)
  overload: piine.Memory.UnmanagedList`1.Insert*
  implements:
  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  nameWithType.vb: UnmanagedList(Of T).Insert(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).Insert(System.Int32, T)
- uid: piine.Memory.UnmanagedList`1.Remove(`0)
  commentId: M:piine.Memory.UnmanagedList`1.Remove(`0)
  id: Remove(`0)
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: UnmanagedList<T>.Remove(T)
  fullName: piine.Memory.UnmanagedList<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Remove
    path: src/Memory/UnmanagedList.cs
    startLine: 145
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nRemoves an item from the list. Preserves Capacity.\n"
  example: []
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
      description: Item to remove.
    return:
      type: System.Boolean
      description: True if item was found and removed, false if item was not found.
    content.vb: Public Function Remove(item As T) As Boolean
  overload: piine.Memory.UnmanagedList`1.Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: UnmanagedList(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).Remove(T)
- uid: piine.Memory.UnmanagedList`1.RemoveAt(System.Int32)
  commentId: M:piine.Memory.UnmanagedList`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: UnmanagedList<T>.RemoveAt(Int32)
  fullName: piine.Memory.UnmanagedList<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: RemoveAt
    path: src/Memory/UnmanagedList.cs
    startLine: 168
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nRemove an element at a specific index. Preserves Capacity.\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Index to remove at
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: piine.Memory.UnmanagedList`1.RemoveAt*
  implements:
  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  nameWithType.vb: UnmanagedList(Of T).RemoveAt(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).RemoveAt(System.Int32)
- uid: piine.Memory.UnmanagedList`1.TrimExcess
  commentId: M:piine.Memory.UnmanagedList`1.TrimExcess
  id: TrimExcess
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: TrimExcess()
  nameWithType: UnmanagedList<T>.TrimExcess()
  fullName: piine.Memory.UnmanagedList<T>.TrimExcess()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: TrimExcess
    path: src/Memory/UnmanagedList.cs
    startLine: 188
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nTries to trim unused memeory by reallocating the internal array to match Count. Will not do anything if the Count is more than 90% of Capacity.\n"
  example: []
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
  overload: piine.Memory.UnmanagedList`1.TrimExcess*
  nameWithType.vb: UnmanagedList(Of T).TrimExcess()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).TrimExcess()
- uid: piine.Memory.UnmanagedList`1.Clear
  commentId: M:piine.Memory.UnmanagedList`1.Clear
  id: Clear
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: UnmanagedList<T>.Clear()
  fullName: piine.Memory.UnmanagedList<T>.Clear()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Clear
    path: src/Memory/UnmanagedList.cs
    startLine: 201
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nClears the list by setting Count to 0. Preserves Capacity.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: piine.Memory.UnmanagedList`1.Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: UnmanagedList(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).Clear()
- uid: piine.Memory.UnmanagedList`1.Contains(`0)
  commentId: M:piine.Memory.UnmanagedList`1.Contains(`0)
  id: Contains(`0)
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: UnmanagedList<T>.Contains(T)
  fullName: piine.Memory.UnmanagedList<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Contains
    path: src/Memory/UnmanagedList.cs
    startLine: 208
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As T) As Boolean
  overload: piine.Memory.UnmanagedList`1.Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: UnmanagedList(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).Contains(T)
- uid: piine.Memory.UnmanagedList`1.IndexOf(`0)
  commentId: M:piine.Memory.UnmanagedList`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: UnmanagedList<T>.IndexOf(T)
  fullName: piine.Memory.UnmanagedList<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: IndexOf
    path: src/Memory/UnmanagedList.cs
    startLine: 226
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nTries to find the index of item.\n"
  example: []
  syntax:
    content: public int IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
      description: Item to find.
    return:
      type: System.Int32
      description: Index of item if it was found, otherwise -1.
    content.vb: Public Function IndexOf(item As T) As Integer
  overload: piine.Memory.UnmanagedList`1.IndexOf*
  implements:
  - System.Collections.Generic.IList{{T}}.IndexOf({T})
  nameWithType.vb: UnmanagedList(Of T).IndexOf(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).IndexOf(T)
- uid: piine.Memory.UnmanagedList`1.CopyTo(`0[],System.Int32)
  commentId: M:piine.Memory.UnmanagedList`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: UnmanagedList<T>.CopyTo(T[], Int32)
  fullName: piine.Memory.UnmanagedList<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: CopyTo
    path: src/Memory/UnmanagedList.cs
    startLine: 239
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public void CopyTo(T[] destination, int destinationIndex)
    parameters:
    - id: destination
      type: '{T}[]'
    - id: destinationIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(destination As T(), destinationIndex As Integer)
  overload: piine.Memory.UnmanagedList`1.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: UnmanagedList(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: piine.Memory.UnmanagedList`1.GetEnumerator
  commentId: M:piine.Memory.UnmanagedList`1.GetEnumerator
  id: GetEnumerator
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: UnmanagedList<T>.GetEnumerator()
  fullName: piine.Memory.UnmanagedList<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: GetEnumerator
    path: src/Memory/UnmanagedList.cs
    startLine: 258
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public UnmanagedList<T>.Enumerator GetEnumerator()
    return:
      type: piine.Memory.UnmanagedList`1.Enumerator
    content.vb: Public Function GetEnumerator As UnmanagedList(Of T).Enumerator
  overload: piine.Memory.UnmanagedList`1.GetEnumerator*
  nameWithType.vb: UnmanagedList(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).GetEnumerator()
- uid: piine.Memory.UnmanagedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:piine.Memory.UnmanagedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: UnmanagedList<T>.IEnumerable<T>.GetEnumerator()
  fullName: piine.Memory.UnmanagedList<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    path: src/Memory/UnmanagedList.cs
    startLine: 265
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
  overload: piine.Memory.UnmanagedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: UnmanagedList(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: piine.Memory.UnmanagedList(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
- uid: piine.Memory.UnmanagedList`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:piine.Memory.UnmanagedList`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: UnmanagedList<T>.IEnumerable.GetEnumerator()
  fullName: piine.Memory.UnmanagedList<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Memory/UnmanagedList.cs
    startLine: 267
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: piine.Memory.UnmanagedList`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: UnmanagedList(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: piine.Memory.UnmanagedList(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: piine.Memory.UnmanagedList`1.Finalize
  commentId: M:piine.Memory.UnmanagedList`1.Finalize
  id: Finalize
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: UnmanagedList<T>.Finalize()
  fullName: piine.Memory.UnmanagedList<T>.Finalize()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Finalize
    path: src/Memory/UnmanagedList.cs
    startLine: 274
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: piine.Memory.UnmanagedList`1.Finalize*
  nameWithType.vb: UnmanagedList(Of T).Finalize()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: piine.Memory.UnmanagedList(Of T).Finalize()
- uid: piine.Memory.UnmanagedList`1.Dispose
  commentId: M:piine.Memory.UnmanagedList`1.Dispose
  id: Dispose
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: UnmanagedList<T>.Dispose()
  fullName: piine.Memory.UnmanagedList<T>.Dispose()
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Dispose
    path: src/Memory/UnmanagedList.cs
    startLine: 276
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: piine.Memory.UnmanagedList`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: UnmanagedList(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.UnmanagedList(Of T).Dispose()
- uid: piine.Memory.UnmanagedList`1.Dispose(System.Boolean)
  commentId: M:piine.Memory.UnmanagedList`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: piine.Memory.UnmanagedList`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: UnmanagedList<T>.Dispose(Boolean)
  fullName: piine.Memory.UnmanagedList<T>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Memory/UnmanagedList.cs
      branch: master
      repo: https://github.com/djmoth/piine.git
    id: Dispose
    path: src/Memory/UnmanagedList.cs
    startLine: 285
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nFree the unmanaged memory. The list will not be usable afterwards\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: piine.Memory.UnmanagedList`1.Dispose*
  nameWithType.vb: UnmanagedList(Of T).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: piine.Memory.UnmanagedList(Of T).Dispose(System.Boolean)
references:
- uid: piine.Memory
  commentId: N:piine.Memory
  name: piine.Memory
  nameWithType: piine.Memory
  fullName: piine.Memory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: piine.Memory.UnmanagedList`1.Count*
  commentId: Overload:piine.Memory.UnmanagedList`1.Count
  name: Count
  nameWithType: UnmanagedList<T>.Count
  fullName: piine.Memory.UnmanagedList<T>.Count
  nameWithType.vb: UnmanagedList(Of T).Count
  fullName.vb: piine.Memory.UnmanagedList(Of T).Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: piine.Memory.UnmanagedList`1.Capacity*
  commentId: Overload:piine.Memory.UnmanagedList`1.Capacity
  name: Capacity
  nameWithType: UnmanagedList<T>.Capacity
  fullName: piine.Memory.UnmanagedList<T>.Capacity
  nameWithType.vb: UnmanagedList(Of T).Capacity
  fullName.vb: piine.Memory.UnmanagedList(Of T).Capacity
- uid: piine.Memory.UnmanagedList`1.Allocated*
  commentId: Overload:piine.Memory.UnmanagedList`1.Allocated
  name: Allocated
  nameWithType: UnmanagedList<T>.Allocated
  fullName: piine.Memory.UnmanagedList<T>.Allocated
  nameWithType.vb: UnmanagedList(Of T).Allocated
  fullName.vb: piine.Memory.UnmanagedList(Of T).Allocated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: piine.Memory.UnmanagedList`1.GetInternalPointer*
  commentId: Overload:piine.Memory.UnmanagedList`1.GetInternalPointer
  name: GetInternalPointer
  nameWithType: UnmanagedList<T>.GetInternalPointer
  fullName: piine.Memory.UnmanagedList<T>.GetInternalPointer
  nameWithType.vb: UnmanagedList(Of T).GetInternalPointer
  fullName.vb: piine.Memory.UnmanagedList(Of T).GetInternalPointer
- uid: '{T}*'
  isExternal: true
  name: T*
  nameWithType: T*
  fullName: T*
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: piine.Memory.UnmanagedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  commentId: Overload:piine.Memory.UnmanagedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<T>.IsReadOnly
  nameWithType: UnmanagedList<T>.ICollection<T>.IsReadOnly
  fullName: piine.Memory.UnmanagedList<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: UnmanagedList(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: piine.Memory.UnmanagedList(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: piine.Memory.UnmanagedList`1.Item*
  commentId: Overload:piine.Memory.UnmanagedList`1.Item
  name: Item
  nameWithType: UnmanagedList<T>.Item
  fullName: piine.Memory.UnmanagedList<T>.Item
  nameWithType.vb: UnmanagedList(Of T).Item
  fullName.vb: piine.Memory.UnmanagedList(Of T).Item
- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{`0}.Item(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: piine.Memory.UnmanagedList`1.#ctor*
  commentId: Overload:piine.Memory.UnmanagedList`1.#ctor
  name: UnmanagedList
  nameWithType: UnmanagedList<T>.UnmanagedList
  fullName: piine.Memory.UnmanagedList<T>.UnmanagedList
  nameWithType.vb: UnmanagedList(Of T).UnmanagedList
  fullName.vb: piine.Memory.UnmanagedList(Of T).UnmanagedList
- uid: piine.Memory.UnmanagedList`1.Add*
  commentId: Overload:piine.Memory.UnmanagedList`1.Add
  name: Add
  nameWithType: UnmanagedList<T>.Add
  fullName: piine.Memory.UnmanagedList<T>.Add
  nameWithType.vb: UnmanagedList(Of T).Add
  fullName.vb: piine.Memory.UnmanagedList(Of T).Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedList`1.Insert*
  commentId: Overload:piine.Memory.UnmanagedList`1.Insert
  name: Insert
  nameWithType: UnmanagedList<T>.Insert
  fullName: piine.Memory.UnmanagedList<T>.Insert
  nameWithType.vb: UnmanagedList(Of T).Insert
  fullName.vb: piine.Memory.UnmanagedList(Of T).Insert
- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  commentId: M:System.Collections.Generic.IList{`0}.Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedList`1.Remove*
  commentId: Overload:piine.Memory.UnmanagedList`1.Remove
  name: Remove
  nameWithType: UnmanagedList<T>.Remove
  fullName: piine.Memory.UnmanagedList<T>.Remove
  nameWithType.vb: UnmanagedList(Of T).Remove
  fullName.vb: piine.Memory.UnmanagedList(Of T).Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedList`1.RemoveAt*
  commentId: Overload:piine.Memory.UnmanagedList`1.RemoveAt
  name: RemoveAt
  nameWithType: UnmanagedList<T>.RemoveAt
  fullName: piine.Memory.UnmanagedList<T>.RemoveAt
  nameWithType.vb: UnmanagedList(Of T).RemoveAt
  fullName.vb: piine.Memory.UnmanagedList(Of T).RemoveAt
- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{`0}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedList`1.TrimExcess*
  commentId: Overload:piine.Memory.UnmanagedList`1.TrimExcess
  name: TrimExcess
  nameWithType: UnmanagedList<T>.TrimExcess
  fullName: piine.Memory.UnmanagedList<T>.TrimExcess
  nameWithType.vb: UnmanagedList(Of T).TrimExcess
  fullName.vb: piine.Memory.UnmanagedList(Of T).TrimExcess
- uid: piine.Memory.UnmanagedList`1.Clear*
  commentId: Overload:piine.Memory.UnmanagedList`1.Clear
  name: Clear
  nameWithType: UnmanagedList<T>.Clear
  fullName: piine.Memory.UnmanagedList<T>.Clear
  nameWithType.vb: UnmanagedList(Of T).Clear
  fullName.vb: piine.Memory.UnmanagedList(Of T).Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedList`1.Contains*
  commentId: Overload:piine.Memory.UnmanagedList`1.Contains
  name: Contains
  nameWithType: UnmanagedList<T>.Contains
  fullName: piine.Memory.UnmanagedList<T>.Contains
  nameWithType.vb: UnmanagedList(Of T).Contains
  fullName.vb: piine.Memory.UnmanagedList(Of T).Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedList`1.IndexOf*
  commentId: Overload:piine.Memory.UnmanagedList`1.IndexOf
  name: IndexOf
  nameWithType: UnmanagedList<T>.IndexOf
  fullName: piine.Memory.UnmanagedList<T>.IndexOf
  nameWithType.vb: UnmanagedList(Of T).IndexOf
  fullName.vb: piine.Memory.UnmanagedList(Of T).IndexOf
- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})
  commentId: M:System.Collections.Generic.IList{`0}.IndexOf(`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedList`1.CopyTo*
  commentId: Overload:piine.Memory.UnmanagedList`1.CopyTo
  name: CopyTo
  nameWithType: UnmanagedList<T>.CopyTo
  fullName: piine.Memory.UnmanagedList<T>.CopyTo
  nameWithType.vb: UnmanagedList(Of T).CopyTo
  fullName.vb: piine.Memory.UnmanagedList(Of T).CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedList`1.GetEnumerator*
  commentId: Overload:piine.Memory.UnmanagedList`1.GetEnumerator
  name: GetEnumerator
  nameWithType: UnmanagedList<T>.GetEnumerator
  fullName: piine.Memory.UnmanagedList<T>.GetEnumerator
  nameWithType.vb: UnmanagedList(Of T).GetEnumerator
  fullName.vb: piine.Memory.UnmanagedList(Of T).GetEnumerator
- uid: piine.Memory.UnmanagedList`1.Enumerator
  commentId: T:piine.Memory.UnmanagedList`1.Enumerator
  parent: piine.Memory
  name: UnmanagedList.Enumerator<>
  nameWithType: UnmanagedList.Enumerator<>
  fullName: piine.Memory.UnmanagedList.Enumerator<>
  nameWithType.vb: UnmanagedList.Enumerator(Of )
  fullName.vb: piine.Memory.UnmanagedList.Enumerator(Of )
  name.vb: UnmanagedList.Enumerator(Of )
  spec.csharp:
  - uid: piine.Memory.UnmanagedList`1.Enumerator
    name: UnmanagedList.Enumerator
    nameWithType: UnmanagedList.Enumerator
    fullName: piine.Memory.UnmanagedList.Enumerator
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: piine.Memory.UnmanagedList`1.Enumerator
    name: UnmanagedList.Enumerator
    nameWithType: UnmanagedList.Enumerator
    fullName: piine.Memory.UnmanagedList.Enumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  commentId: Overload:piine.Memory.UnmanagedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<T>.GetEnumerator
  nameWithType: UnmanagedList<T>.IEnumerable<T>.GetEnumerator
  fullName: piine.Memory.UnmanagedList<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType.vb: UnmanagedList(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  fullName.vb: piine.Memory.UnmanagedList(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.UnmanagedList`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:piine.Memory.UnmanagedList`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: UnmanagedList<T>.IEnumerable.GetEnumerator
  fullName: piine.Memory.UnmanagedList<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: UnmanagedList(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: piine.Memory.UnmanagedList(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: piine.Memory.UnmanagedList`1.Finalize*
  commentId: Overload:piine.Memory.UnmanagedList`1.Finalize
  name: Finalize
  nameWithType: UnmanagedList<T>.Finalize
  fullName: piine.Memory.UnmanagedList<T>.Finalize
  nameWithType.vb: UnmanagedList(Of T).Finalize
  fullName.vb: piine.Memory.UnmanagedList(Of T).Finalize
- uid: piine.Memory.UnmanagedList`1.Dispose*
  commentId: Overload:piine.Memory.UnmanagedList`1.Dispose
  name: Dispose
  nameWithType: UnmanagedList<T>.Dispose
  fullName: piine.Memory.UnmanagedList<T>.Dispose
  nameWithType.vb: UnmanagedList(Of T).Dispose
  fullName.vb: piine.Memory.UnmanagedList(Of T).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
