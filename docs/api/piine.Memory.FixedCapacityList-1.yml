### YamlMime:ManagedReference
items:
- uid: piine.Memory.FixedCapacityList`1
  commentId: T:piine.Memory.FixedCapacityList`1
  id: FixedCapacityList`1
  parent: piine.Memory
  children:
  - piine.Memory.FixedCapacityList`1.#ctor(System.Span{`0},System.Int32)
  - piine.Memory.FixedCapacityList`1.Add(`0)
  - piine.Memory.FixedCapacityList`1.Capacity
  - piine.Memory.FixedCapacityList`1.Clear
  - piine.Memory.FixedCapacityList`1.Contains(`0)
  - piine.Memory.FixedCapacityList`1.CopyTo(`0[],System.Int32)
  - piine.Memory.FixedCapacityList`1.Count
  - piine.Memory.FixedCapacityList`1.GetEnumerator
  - piine.Memory.FixedCapacityList`1.GetSpan
  - piine.Memory.FixedCapacityList`1.IndexOf(`0)
  - piine.Memory.FixedCapacityList`1.Insert(System.Int32,`0)
  - piine.Memory.FixedCapacityList`1.Item(System.Int32)
  - piine.Memory.FixedCapacityList`1.Remove(`0)
  - piine.Memory.FixedCapacityList`1.RemoveAt(System.Int32)
  langs:
  - csharp
  - vb
  name: FixedCapacityList<T>
  nameWithType: FixedCapacityList<T>
  fullName: piine.Memory.FixedCapacityList<T>
  type: Struct
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: FixedCapacityList
    path: src/Memory/FixedCapacityList.cs
    startLine: 10
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public struct FixedCapacityList<T>
    typeParameters:
    - id: T
    content.vb: Public Structure FixedCapacityList(Of T)
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: FixedCapacityList(Of T)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: piine.Memory.FixedCapacityList(Of T)
  name.vb: FixedCapacityList(Of T)
- uid: piine.Memory.FixedCapacityList`1.Count
  commentId: P:piine.Memory.FixedCapacityList`1.Count
  id: Count
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: FixedCapacityList<T>.Count
  fullName: piine.Memory.FixedCapacityList<T>.Count
  type: Property
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Count
    path: src/Memory/FixedCapacityList.cs
    startLine: 17
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nNumber of elements in the list\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: piine.Memory.FixedCapacityList`1.Count*
  nameWithType.vb: FixedCapacityList(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Count
- uid: piine.Memory.FixedCapacityList`1.Capacity
  commentId: P:piine.Memory.FixedCapacityList`1.Capacity
  id: Capacity
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: Capacity
  nameWithType: FixedCapacityList<T>.Capacity
  fullName: piine.Memory.FixedCapacityList<T>.Capacity
  type: Property
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Capacity
    path: src/Memory/FixedCapacityList.cs
    startLine: 22
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nSize of the internal array.\n"
  example: []
  syntax:
    content: public int Capacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Capacity As Integer
  overload: piine.Memory.FixedCapacityList`1.Capacity*
  nameWithType.vb: FixedCapacityList(Of T).Capacity
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Capacity
- uid: piine.Memory.FixedCapacityList`1.Item(System.Int32)
  commentId: P:piine.Memory.FixedCapacityList`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: FixedCapacityList<T>.Item[Int32]
  fullName: piine.Memory.FixedCapacityList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: this[]
    path: src/Memory/FixedCapacityList.cs
    startLine: 28
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nAccess an element in the FixedCapacityList. Performs bounds checking.\n"
  example: []
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: Zero-based index of element.
    return:
      type: '{T}'
    content.vb: Public Property Item(index As Integer) As T
  overload: piine.Memory.FixedCapacityList`1.Item*
  nameWithType.vb: FixedCapacityList(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: piine.Memory.FixedCapacityList`1.#ctor(System.Span{`0},System.Int32)
  commentId: M:piine.Memory.FixedCapacityList`1.#ctor(System.Span{`0},System.Int32)
  id: '#ctor(System.Span{`0},System.Int32)'
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: FixedCapacityList(Span<T>, Int32)
  nameWithType: FixedCapacityList<T>.FixedCapacityList(Span<T>, Int32)
  fullName: piine.Memory.FixedCapacityList<T>.FixedCapacityList(System.Span<T>, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: .ctor
    path: src/Memory/FixedCapacityList.cs
    startLine: 46
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public FixedCapacityList(Span<T> source, int startCount = 0)
    parameters:
    - id: source
      type: System.Span{{T}}
    - id: startCount
      type: System.Int32
    content.vb: Public Sub New(source As Span(Of T), startCount As Integer = 0)
  overload: piine.Memory.FixedCapacityList`1.#ctor*
  nameWithType.vb: FixedCapacityList(Of T).FixedCapacityList(Span(Of T), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedCapacityList(Of T).FixedCapacityList(System.Span(Of T), System.Int32)
  name.vb: FixedCapacityList(Span(Of T), Int32)
- uid: piine.Memory.FixedCapacityList`1.GetSpan
  commentId: M:piine.Memory.FixedCapacityList`1.GetSpan
  id: GetSpan
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: GetSpan()
  nameWithType: FixedCapacityList<T>.GetSpan()
  fullName: piine.Memory.FixedCapacityList<T>.GetSpan()
  type: Method
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: GetSpan
    path: src/Memory/FixedCapacityList.cs
    startLine: 56
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public Span<T> GetSpan()
    return:
      type: System.Span{{T}}
    content.vb: Public Function GetSpan As Span(Of T)
  overload: piine.Memory.FixedCapacityList`1.GetSpan*
  nameWithType.vb: FixedCapacityList(Of T).GetSpan()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedCapacityList(Of T).GetSpan()
- uid: piine.Memory.FixedCapacityList`1.Add(`0)
  commentId: M:piine.Memory.FixedCapacityList`1.Add(`0)
  id: Add(`0)
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: FixedCapacityList<T>.Add(T)
  fullName: piine.Memory.FixedCapacityList<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Add
    path: src/Memory/FixedCapacityList.cs
    startLine: 63
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nAdd a new item to the end of the list. Fails if at full capacity.\n"
  example: []
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
      description: ''
    content.vb: Public Sub Add(item As T)
  overload: piine.Memory.FixedCapacityList`1.Add*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if there is no more space in the backing storage
  nameWithType.vb: FixedCapacityList(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Add(T)
- uid: piine.Memory.FixedCapacityList`1.Insert(System.Int32,`0)
  commentId: M:piine.Memory.FixedCapacityList`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  nameWithType: FixedCapacityList<T>.Insert(Int32, T)
  fullName: piine.Memory.FixedCapacityList<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Insert
    path: src/Memory/FixedCapacityList.cs
    startLine: 78
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nInsert a new item at a specific index. Moves the items at and above &apos;index&apos; 1 index up. Fails if at full capacity.\n"
  example: []
  syntax:
    content: public void Insert(int index, T item)
    parameters:
    - id: index
      type: System.Int32
      description: Index to insert the item at.
    - id: item
      type: '{T}'
      description: Item to insert.
    content.vb: Public Sub Insert(index As Integer, item As T)
  overload: piine.Memory.FixedCapacityList`1.Insert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if there is no more space in the backing storage
  nameWithType.vb: FixedCapacityList(Of T).Insert(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Insert(System.Int32, T)
- uid: piine.Memory.FixedCapacityList`1.Remove(`0)
  commentId: M:piine.Memory.FixedCapacityList`1.Remove(`0)
  id: Remove(`0)
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: FixedCapacityList<T>.Remove(T)
  fullName: piine.Memory.FixedCapacityList<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Remove
    path: src/Memory/FixedCapacityList.cs
    startLine: 98
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nRemoves an item from the list. Preserves Capacity.\n"
  example: []
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
      description: Item to remove.
    return:
      type: System.Boolean
      description: True if item was found and removed, false if item was not found.
    content.vb: Public Function Remove(item As T) As Boolean
  overload: piine.Memory.FixedCapacityList`1.Remove*
  nameWithType.vb: FixedCapacityList(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Remove(T)
- uid: piine.Memory.FixedCapacityList`1.RemoveAt(System.Int32)
  commentId: M:piine.Memory.FixedCapacityList`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: FixedCapacityList<T>.RemoveAt(Int32)
  fullName: piine.Memory.FixedCapacityList<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: RemoveAt
    path: src/Memory/FixedCapacityList.cs
    startLine: 119
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nRemove an element at a specific index. Preserves Capacity.\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Index to remove at
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: piine.Memory.FixedCapacityList`1.RemoveAt*
  nameWithType.vb: FixedCapacityList(Of T).RemoveAt(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedCapacityList(Of T).RemoveAt(System.Int32)
- uid: piine.Memory.FixedCapacityList`1.Clear
  commentId: M:piine.Memory.FixedCapacityList`1.Clear
  id: Clear
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: FixedCapacityList<T>.Clear()
  fullName: piine.Memory.FixedCapacityList<T>.Clear()
  type: Method
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Clear
    path: src/Memory/FixedCapacityList.cs
    startLine: 137
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nClears the list by setting Count to 0. Preserves Capacity.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: piine.Memory.FixedCapacityList`1.Clear*
  nameWithType.vb: FixedCapacityList(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Clear()
- uid: piine.Memory.FixedCapacityList`1.Contains(`0)
  commentId: M:piine.Memory.FixedCapacityList`1.Contains(`0)
  id: Contains(`0)
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: FixedCapacityList<T>.Contains(T)
  fullName: piine.Memory.FixedCapacityList<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: Contains
    path: src/Memory/FixedCapacityList.cs
    startLine: 142
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As T) As Boolean
  overload: piine.Memory.FixedCapacityList`1.Contains*
  nameWithType.vb: FixedCapacityList(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Contains(T)
- uid: piine.Memory.FixedCapacityList`1.IndexOf(`0)
  commentId: M:piine.Memory.FixedCapacityList`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: FixedCapacityList<T>.IndexOf(T)
  fullName: piine.Memory.FixedCapacityList<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: IndexOf
    path: src/Memory/FixedCapacityList.cs
    startLine: 158
  assemblies:
  - piine
  namespace: piine.Memory
  summary: "\nTries to find the index of item.\n"
  example: []
  syntax:
    content: public int IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
      description: Item to find.
    return:
      type: System.Int32
      description: Index of item if it was found, otherwise -1.
    content.vb: Public Function IndexOf(item As T) As Integer
  overload: piine.Memory.FixedCapacityList`1.IndexOf*
  nameWithType.vb: FixedCapacityList(Of T).IndexOf(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedCapacityList(Of T).IndexOf(T)
- uid: piine.Memory.FixedCapacityList`1.CopyTo(`0[],System.Int32)
  commentId: M:piine.Memory.FixedCapacityList`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: FixedCapacityList<T>.CopyTo(T[], Int32)
  fullName: piine.Memory.FixedCapacityList<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: CopyTo
    path: src/Memory/FixedCapacityList.cs
    startLine: 169
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public void CopyTo(T[] destination, int destinationIndex)
    parameters:
    - id: destination
      type: '{T}[]'
    - id: destinationIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(destination As T(), destinationIndex As Integer)
  overload: piine.Memory.FixedCapacityList`1.CopyTo*
  nameWithType.vb: FixedCapacityList(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedCapacityList(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: piine.Memory.FixedCapacityList`1.GetEnumerator
  commentId: M:piine.Memory.FixedCapacityList`1.GetEnumerator
  id: GetEnumerator
  parent: piine.Memory.FixedCapacityList`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: FixedCapacityList<T>.GetEnumerator()
  fullName: piine.Memory.FixedCapacityList<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Memory/FixedCapacityList.cs
      branch: dev
      repo: https://github.com/djmoth/piine.git
    id: GetEnumerator
    path: src/Memory/FixedCapacityList.cs
    startLine: 199
  assemblies:
  - piine
  namespace: piine.Memory
  syntax:
    content: public FixedCapacityList<T>.Enumerator GetEnumerator()
    return:
      type: piine.Memory.FixedCapacityList`1.Enumerator
    content.vb: Public Function GetEnumerator As FixedCapacityList(Of T).Enumerator
  overload: piine.Memory.FixedCapacityList`1.GetEnumerator*
  nameWithType.vb: FixedCapacityList(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: piine.Memory.FixedCapacityList(Of T).GetEnumerator()
references:
- uid: piine.Memory
  commentId: N:piine.Memory
  name: piine.Memory
  nameWithType: piine.Memory
  fullName: piine.Memory
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: piine.Memory.FixedCapacityList`1.Count*
  commentId: Overload:piine.Memory.FixedCapacityList`1.Count
  name: Count
  nameWithType: FixedCapacityList<T>.Count
  fullName: piine.Memory.FixedCapacityList<T>.Count
  nameWithType.vb: FixedCapacityList(Of T).Count
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: piine.Memory.FixedCapacityList`1.Capacity*
  commentId: Overload:piine.Memory.FixedCapacityList`1.Capacity
  name: Capacity
  nameWithType: FixedCapacityList<T>.Capacity
  fullName: piine.Memory.FixedCapacityList<T>.Capacity
  nameWithType.vb: FixedCapacityList(Of T).Capacity
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Capacity
- uid: piine.Memory.FixedCapacityList`1.Item*
  commentId: Overload:piine.Memory.FixedCapacityList`1.Item
  name: Item
  nameWithType: FixedCapacityList<T>.Item
  fullName: piine.Memory.FixedCapacityList<T>.Item
  nameWithType.vb: FixedCapacityList(Of T).Item
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Item
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: piine.Memory.FixedCapacityList`1.#ctor*
  commentId: Overload:piine.Memory.FixedCapacityList`1.#ctor
  name: FixedCapacityList
  nameWithType: FixedCapacityList<T>.FixedCapacityList
  fullName: piine.Memory.FixedCapacityList<T>.FixedCapacityList
  nameWithType.vb: FixedCapacityList(Of T).FixedCapacityList
  fullName.vb: piine.Memory.FixedCapacityList(Of T).FixedCapacityList
- uid: System.Span{{T}}
  commentId: T:System.Span{`0}
  parent: System
  definition: System.Span`1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: piine.Memory.FixedCapacityList`1.GetSpan*
  commentId: Overload:piine.Memory.FixedCapacityList`1.GetSpan
  name: GetSpan
  nameWithType: FixedCapacityList<T>.GetSpan
  fullName: piine.Memory.FixedCapacityList<T>.GetSpan
  nameWithType.vb: FixedCapacityList(Of T).GetSpan
  fullName.vb: piine.Memory.FixedCapacityList(Of T).GetSpan
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: piine.Memory.FixedCapacityList`1.Add*
  commentId: Overload:piine.Memory.FixedCapacityList`1.Add
  name: Add
  nameWithType: FixedCapacityList<T>.Add
  fullName: piine.Memory.FixedCapacityList<T>.Add
  nameWithType.vb: FixedCapacityList(Of T).Add
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Add
- uid: piine.Memory.FixedCapacityList`1.Insert*
  commentId: Overload:piine.Memory.FixedCapacityList`1.Insert
  name: Insert
  nameWithType: FixedCapacityList<T>.Insert
  fullName: piine.Memory.FixedCapacityList<T>.Insert
  nameWithType.vb: FixedCapacityList(Of T).Insert
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Insert
- uid: piine.Memory.FixedCapacityList`1.Remove*
  commentId: Overload:piine.Memory.FixedCapacityList`1.Remove
  name: Remove
  nameWithType: FixedCapacityList<T>.Remove
  fullName: piine.Memory.FixedCapacityList<T>.Remove
  nameWithType.vb: FixedCapacityList(Of T).Remove
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Remove
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: piine.Memory.FixedCapacityList`1.RemoveAt*
  commentId: Overload:piine.Memory.FixedCapacityList`1.RemoveAt
  name: RemoveAt
  nameWithType: FixedCapacityList<T>.RemoveAt
  fullName: piine.Memory.FixedCapacityList<T>.RemoveAt
  nameWithType.vb: FixedCapacityList(Of T).RemoveAt
  fullName.vb: piine.Memory.FixedCapacityList(Of T).RemoveAt
- uid: piine.Memory.FixedCapacityList`1.Clear*
  commentId: Overload:piine.Memory.FixedCapacityList`1.Clear
  name: Clear
  nameWithType: FixedCapacityList<T>.Clear
  fullName: piine.Memory.FixedCapacityList<T>.Clear
  nameWithType.vb: FixedCapacityList(Of T).Clear
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Clear
- uid: piine.Memory.FixedCapacityList`1.Contains*
  commentId: Overload:piine.Memory.FixedCapacityList`1.Contains
  name: Contains
  nameWithType: FixedCapacityList<T>.Contains
  fullName: piine.Memory.FixedCapacityList<T>.Contains
  nameWithType.vb: FixedCapacityList(Of T).Contains
  fullName.vb: piine.Memory.FixedCapacityList(Of T).Contains
- uid: piine.Memory.FixedCapacityList`1.IndexOf*
  commentId: Overload:piine.Memory.FixedCapacityList`1.IndexOf
  name: IndexOf
  nameWithType: FixedCapacityList<T>.IndexOf
  fullName: piine.Memory.FixedCapacityList<T>.IndexOf
  nameWithType.vb: FixedCapacityList(Of T).IndexOf
  fullName.vb: piine.Memory.FixedCapacityList(Of T).IndexOf
- uid: piine.Memory.FixedCapacityList`1.CopyTo*
  commentId: Overload:piine.Memory.FixedCapacityList`1.CopyTo
  name: CopyTo
  nameWithType: FixedCapacityList<T>.CopyTo
  fullName: piine.Memory.FixedCapacityList<T>.CopyTo
  nameWithType.vb: FixedCapacityList(Of T).CopyTo
  fullName.vb: piine.Memory.FixedCapacityList(Of T).CopyTo
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: piine.Memory.FixedCapacityList`1.GetEnumerator*
  commentId: Overload:piine.Memory.FixedCapacityList`1.GetEnumerator
  name: GetEnumerator
  nameWithType: FixedCapacityList<T>.GetEnumerator
  fullName: piine.Memory.FixedCapacityList<T>.GetEnumerator
  nameWithType.vb: FixedCapacityList(Of T).GetEnumerator
  fullName.vb: piine.Memory.FixedCapacityList(Of T).GetEnumerator
- uid: piine.Memory.FixedCapacityList`1.Enumerator
  commentId: T:piine.Memory.FixedCapacityList`1.Enumerator
  parent: piine.Memory
  name: FixedCapacityList.Enumerator<>
  nameWithType: FixedCapacityList.Enumerator<>
  fullName: piine.Memory.FixedCapacityList.Enumerator<>
  nameWithType.vb: FixedCapacityList.Enumerator(Of )
  fullName.vb: piine.Memory.FixedCapacityList.Enumerator(Of )
  name.vb: FixedCapacityList.Enumerator(Of )
  spec.csharp:
  - uid: piine.Memory.FixedCapacityList`1.Enumerator
    name: FixedCapacityList.Enumerator
    nameWithType: FixedCapacityList.Enumerator
    fullName: piine.Memory.FixedCapacityList.Enumerator
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: piine.Memory.FixedCapacityList`1.Enumerator
    name: FixedCapacityList.Enumerator
    nameWithType: FixedCapacityList.Enumerator
    fullName: piine.Memory.FixedCapacityList.Enumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
